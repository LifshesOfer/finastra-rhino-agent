{
	"info": {
		"_postman_id": "d34fe3ca-4b41-4e54-8d8b-9e7f81e3a669",
		"name": "Rhino API Reference Guide v3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "One Time Setup",
			"item": [
				{
					"name": "Setup Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//┌─[ Rhino Settings ]─────────────\r",
									"//└────────────────────────────────\r",
									"pm.collectionVariables.set('endpoint', 'https://rhino.azurewebsites.net/api/v3');\r",
									"//pm.collectionVariables.set('endpoint', 'http://localhost:9000/api/v3');\r",
									"pm.collectionVariables.set('rhino_password', 'Aa123456!');\r",
									"pm.collectionVariables.set('rhino_user', 'automation@rhino.api');\r",
									"pm.collectionVariables.set('use_reports', false);\r",
									"\r",
									"//┌─[ Driver Settings ]────────────\r",
									"//└────────────────────────────────\r",
									"//pm.collectionVariables.set('rhino_drivers', '.');\r",
									"//pm.collectionVariables.set('rhino_drivers', 'http://localhost:4444/wd/hub');\r",
									"pm.collectionVariables.set('rhino_drivers', \"https://rhinoapi1:9pE5Cug853CbraxVviBy@hub-cloud.browserstack.com/wd/hub\");\r",
									"\r",
									"//┌─[ Async Settings ]─────────────\r",
									"//└────────────────────────────────\r",
									"pm.collectionVariables.set('async_pooling', '2000')\r",
									"pm.collectionVariables.set('async_timeout', '60000')\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/ping/rhino",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"ping",
								"rhino"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Test Case Collections",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Configurations",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/environment",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment"
							]
						},
						"description": "Deletes _**Rhino Parameter**_ if the parameter exists.\r\n\r\n```\r\nDELETE /api/v3/environment\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                      |\r\n|----|-----------------------------------------------------------------|\r\n|204 |No Content, all _**Rhino Parameters**_ were successfully deleted.|\r\n|500 |Fail, the server encountered an unexpected error.                |"
					},
					"response": []
				}
			]
		},
		{
			"name": "Documentation: Configurations",
			"item": [
				{
					"name": "Create Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Configurations.md#create-configuration"
					},
					"response": []
				},
				{
					"name": "Get Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations",
								"{{configuration_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Configurations.md#get-configuration"
					},
					"response": []
				},
				{
					"name": "Get Configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Configurations.md#get-configurations"
					},
					"response": []
				},
				{
					"name": "Update Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox - After Update\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_user}}\",\r\n        \"userName\": \"{{rhino_password}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": false,\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"dataProvider\": null,\r\n        \"archive\": false,\r\n        \"localReport\": false,\r\n        \"addGravityData\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations",
								"{{configuration_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Configurations.md#update-configuration"
					},
					"response": []
				},
				{
					"name": "Delete Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations",
								"{{configuration_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Configurations.md#delete-configuration"
					},
					"response": []
				},
				{
					"name": "Delete Configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204,404]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Configurations.md#delete-configurations"
					},
					"response": []
				}
			]
		},
		{
			"name": "Documentation: Debug Automation",
			"item": [
				{
					"name": "Send Gravity API Web Automation Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Authentication\": {\r\n        \"Password\": \"{{rhino_password}}\",\r\n        \"UserName\": \"{{rhino_user}}\"\r\n    },\r\n    \"EngineConfiguration\": {\r\n        \"ElementSearchingTimeout\": 15000,\r\n        \"PageLoadTimeout\": 60000\r\n    },\r\n    \"ScreenshotsConfiguration\": {\r\n        \"KeepOriginal\": false,\r\n        \"ReturnScreenshots\": {{use_reports}}\r\n    },\r\n    \"DriverParams\": \"{\\\"driver\\\": \\\"ChromeDriver\\\", \\\"driverBinaries\\\": \\\"{{rhino_drivers}}\\\"}\",\r\n    \"Actions\": [\r\n        {\r\n            \"ActionType\": \"GoToUrl\",\r\n            \"Argument\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n        },\r\n        {\r\n            \"ActionType\": \"Assert\",\r\n            \"Locator\": \"Xpath\",\r\n            \"Argument\": \"{{$ --url --match:gravitymvctestapplication.azurewebsites.net}}\"\r\n        },\r\n        {\r\n            \"ActionType\": \"CloseAllChildWindows\"\r\n        },\r\n        {\r\n            \"ActionType\": \"SendKeys\",\r\n            \"ElementToActOn\": \"//input[@id='SearchString']\",\r\n            \"Argument\": \"Carson\"\r\n        },\r\n        {\r\n            \"ActionType\": \"Click\",\r\n            \"Locator\": \"CssSelector\",\r\n            \"ElementToActOn\": \"#SearchButton\"\r\n        },\r\n        {\r\n            \"ActionType\": \"Wait\",\r\n            \"Argument\": \"3000\"\r\n        },\r\n        {\r\n            \"ActionType\": \"Assert\",\r\n            \"ElementToActOn\": \"//td[@id]\",\r\n            \"Argument\": \"{{$ --count --gt:0}}\"\r\n        },\r\n        {\r\n            \"ActionType\": \"RegisterParameter\",\r\n            \"ElementToActOn\": \"Jhon\",\r\n            \"Argument\": \"first_name\"\r\n        },\r\n        {\r\n            \"ActionType\": \"CloseBrowser\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/debug",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"debug"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Debug.md#invoke-gravity-api-request"
					},
					"response": []
				}
			]
		},
		{
			"name": "Documentation: Environment",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/environment",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"environment"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add or Replace Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "parameter value",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/environment/parameterName",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"parameterName"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Environment.md#add-or-replace-parameter"
					},
					"response": []
				},
				{
					"name": "Sync Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Number of parameters is 1\", function () {\r",
									"    var length = Object.keys(JSON.parse(responseBody)).length;\r",
									"    pm.expect(length).to.equal(1); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment/sync",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"sync"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Environment.md#sync-parameters"
					},
					"response": []
				},
				{
					"name": "Get Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Number of parameters is 1\", function () {\r",
									"    var length = Object.keys(JSON.parse(responseBody)).length;\r",
									"    pm.expect(length).to.equal(1); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Environment.md#get-parameters"
					},
					"response": []
				},
				{
					"name": "Get Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment/parameterName",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"parameterName"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Environment.md#get-parameter"
					},
					"response": []
				},
				{
					"name": "Delete Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/environment/parameterName",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"parameterName"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Environment.md#delete-parameter"
					},
					"response": []
				},
				{
					"name": "Delete Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/environment",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Environment.md#delete-parameters"
					},
					"response": []
				}
			]
		},
		{
			"name": "Documentation: Logs & Analysis",
			"item": [
				{
					"name": "Get Logs Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Logs found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var id = jsonData[0].substr(9, 8);\r",
									"pm.collectionVariables.set(\"log_id\", id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/logs",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"logs"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Logs.md#get-logs-files"
					},
					"response": []
				},
				{
					"name": "Get Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/logs/{{log_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"logs",
								"{{log_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Logs.md#get-log"
					},
					"response": []
				},
				{
					"name": "Get Logs - Last Number of Lines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/logs/{{log_id}}/size/20",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"logs",
								"{{log_id}}",
								"size",
								"20"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Logs.md#get-log-by-number-of-lines"
					},
					"response": []
				},
				{
					"name": "Get Logs - Export",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/logs/{{log_id}}/export",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"logs",
								"{{log_id}}",
								"export"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Logs.md#export-log"
					},
					"response": []
				}
			]
		},
		{
			"name": "Documentation: Page Models",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204,404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete All Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Model Collection with Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Students Input Models\",\n        \"entries\": [\n            {\n                \"name\": \"search students text-box\",\n                \"value\": \"#SearchString\",\n                \"type\": \"css selector\",\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\n            },\n            {\n                \"name\": \"search students button\",\n                \"value\": \"//input[@id='SearchButton']\",\n                \"comment\": \"Search students button on the top center panel under students page.\"\n            }    \n        ],\n        \"context\": {\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\n        }\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models",
								"{{configuration_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Models.md#create-model-with-configuration"
					},
					"response": []
				},
				{
					"name": "Create Model Collection with Configuration Markdown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "/** Sepcifications:\n/** 1. empty values are not allowd\n/** 2. when value in unknown use -1 as a placeholder\n/**\n[test-models] Students Input Models - From Markdown\n|name                         |value                      |type         |comment                  |\n|-----------------------------|---------------------------|-------------|-------------------------|\n|(md) search students text-box|#SearchString              |css selector |Search students text-box.|\n|(md) search students button  |//input[@id='SearchButton']|xpath        |Search students button.  |",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models/md/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models",
								"md",
								"{{configuration_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Models.md#create-model-with-configuration"
					},
					"response": []
				},
				{
					"name": "Create Model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Students Input Models - 2\",\n        \"entries\": [\n            {\n                \"name\": \"search students text-box\",\n                \"value\": \"#SearchString\",\n                \"type\": \"css selector\",\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\n            },\n            {\n                \"name\": \"search students button\",\n                \"value\": \"//input[@id='SearchButton']\",\n                \"comment\": \"Search students button on the top center panel under students page.\"\n            }    \n        ],\n        \"context\": {\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\n        }\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Models.md#create-model"
					},
					"response": []
				},
				{
					"name": "Create Model Markdown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "/** Sepcifications:\n/** 1. empty values are not allowd\n/** 2. when value in unknown use -1 as a placeholder\n/**\n[test-models] Students Input Models - From Markdown - 2\n|name                             |value                      |type         |comment                  |\n|---------------------------------|---------------------------|-------------|-------------------------|\n|(md) search students text-box - 2|#SearchString              |css selector |Search students text-box.|\n|(md) search students button - 2  |//input[@id='SearchButton']|xpath        |Search students button.  |",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models/md",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models",
								"md"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Models.md#create-model-with-configuration"
					},
					"response": []
				},
				{
					"name": "Get Model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models",
								"{{collection_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Models.md##get-model"
					},
					"response": []
				},
				{
					"name": "Get Associated Configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models/{{collection_id}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models",
								"{{collection_id}}",
								"configurations"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Models.md##get-associated-configurations"
					},
					"response": []
				},
				{
					"name": "Get Models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Models.md#get-models"
					},
					"response": []
				},
				{
					"name": "Associate Model to Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models/{{collection_id}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models",
								"{{collection_id}}",
								"configurations",
								"{{configuration_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Models.md#associate-model-to-configuration"
					},
					"response": []
				},
				{
					"name": "Delete Model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models",
								"{{collection_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Models.md#delete-model"
					},
					"response": []
				},
				{
					"name": "Add Model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {    \r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"name\": \"Students Input Models - 2\",\n\t\t\"entries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"search students text-box\",\n\t\t\t\t\"value\": \"#SearchString\",\n\t\t\t\t\"type\": \"css selector\",\n                \"model\": \"Students Input Models\",\n\t\t\t\t\"comment\": \"Search students text-box on the top center panel under students page.\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"search students button\",\n\t\t\t\t\"value\": \"//input[@id='SearchButton']\",\n                \"type\": \"xpath\",\n\t\t\t\t\"model\": \"Students Input Models\",\n\t\t\t\t\"comment\": \"Search students button on the top center panel under students page.\"\n\t\t\t}\t\n\t\t],\n        \"context\": {\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\n\t\t}\n\t}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models",
								"{{collection_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Models.md#add-models-to-collection"
					},
					"response": []
				},
				{
					"name": "Delete Models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Models.md#delete-models"
					},
					"response": []
				}
			]
		},
		{
			"name": "Documentation: Plugins",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Plugins - Public",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								},
								"description": "Deletes all existing _**Rhino Plugin**_.\r\n\r\n```\r\nDELETE /api/v3/configurations\r\n```\r\n\r\n> Please Note: Deleting a plugin cannot be undone and can affect test cases.\r\n\r\n### Response Codes\r\n|Code|Description                                      |\r\n|----|-------------------------------------------------|\r\n|204 |Success, the _**Rhino Plugins**_ were deleted.   |\r\n|404 |Not Found, the _**Rhino Plugin**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.|"
							},
							"response": []
						},
						{
							"name": "Delete Plugins - Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								},
								"description": "Deletes all existing _**Rhino Plugin**_.\r\n\r\n```\r\nDELETE /api/v3/configurations\r\n```\r\n\r\n> Please Note: Deleting a plugin cannot be undone and can affect test cases.\r\n\r\n### Response Codes\r\n|Code|Description                                      |\r\n|----|-------------------------------------------------|\r\n|204 |Success, the _**Rhino Plugins**_ were deleted.   |\r\n|404 |Not Found, the _**Rhino Plugin**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.|"
							},
							"response": []
						}
					]
				},
				{
					"name": "Create or Update Plugins",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {(?i)student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                         |\r\n|----------|----------------------------------------------------|\r\n|department|Department name. Will be used for searching courses.|\r\n|total     |Total courses. Will be used asserting results.      |\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {@first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {(?i)student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {@first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {@last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:@first_name --last_name:@last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|"
						},
						"url": {
							"raw": "{{endpoint}}/plugins",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"plugins"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Plugins.md#create-or-update-plugins"
					},
					"response": []
				},
				{
					"name": "Get Plugin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/plugins/SearchStudent",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"plugins",
								"SearchStudent"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Plugins.md#get-plugin"
					},
					"response": []
				},
				{
					"name": "Get Plugins",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/plugins",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"plugins"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Plugins.md#get-plugins"
					},
					"response": []
				},
				{
					"name": "Delete Plugin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/plugins/SearchStudent",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"plugins",
								"SearchStudent"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Plugins.md#delete-plugin"
					},
					"response": []
				},
				{
					"name": "Delete Plugins",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/plugins",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"plugins"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Plugins.md#delete-plugins"
					},
					"response": []
				}
			]
		},
		{
			"name": "Documentation: Rhino",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Test Case Collections",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Page Model Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Configurations",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Configuration - Local Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"[test-id] Text-000\\r\\n[test-scenario]\\r\\nOpen a Web Site\\r\\n[test-actions]\\r\\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/}\\r\\n2. wait {1000}\\r\\n3. close browser\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {Carson} into {@search_text_box}\n4. click on {@search_button} using {css selector}\n5. wait for {3000} milliseconds\n6. register parameter {first_name} take {Jhon}\n7. close browser\n\n[test-expected-results]\n[1] assert {url} match {@url_expected}\n[5] assert {count} on {@students_table} is greater than {0}\n\n[test-data-provider]\n[\n\t{\n        \"url_expected\":\"gravitymvctestapplication.azurewebsites.net\",\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\n\t\t\"search_text_box\":\"//input[@id='SearchString']\",\n\t\t\"search_button\":\"#SearchButton\",\n\t\t\"students_table\": \"//td[@id]\"\n\t}\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Invoke Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"[test-id] Text-000\\r\\n[test-scenario]\\r\\nOpen a Web Site\\r\\n[test-actions]\\r\\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/}\\r\\n2. wait {1000}\\r\\n register parameter {{$ --name:p --scope:session}} take {//a}  \\r\\n3. close browser\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/configurations/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"configurations",
								"invoke"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Rhino.md#invoke-configuration"
					},
					"response": []
				},
				{
					"name": "Invoke Configuration by Configuration ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/configurations/invoke/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"configurations",
								"invoke",
								"{{configuration_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Rhino.md#invoke-configuration-by-id"
					},
					"response": []
				},
				{
					"name": "Invoke Collection by Configuration ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search_text_box}\r\n4. click on {@search_button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. register parameter {first_name} take {Jhon}\r\n7. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@url_expected}\r\n[5] assert {count} on {@students_table} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n        \"url_expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\r\n\t\t\"search_text_box\":\"//input[@id='SearchString']\",\r\n\t\t\"search_button\":\"#SearchButton\",\r\n\t\t\"students_table\": \"//td[@id]\"\r\n\t}\r\n]"
						},
						"url": {
							"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}/collections/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"configurations",
								"{{configuration_id}}",
								"collections",
								"invoke"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Rhino.md#invoke-collection-by-configuration-id"
					},
					"response": []
				},
				{
					"name": "Invoke Collection by Collection & Configuration ID(s)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}/collections/invoke/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"configurations",
								"{{configuration_id}}",
								"collections",
								"invoke",
								"{{collection_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Rhino.md#invoke-collection-by-collection-id-and-configuration-id"
					},
					"response": []
				},
				{
					"name": "Invoke Collection by Collection ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/collections/invoke/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"collections",
								"invoke",
								"{{collection_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Rhino.md#invoke-collection-by-collection-id-and-configuration-id#invoke-collection-by-collection-id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Documentation: Rhino Async",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Test Case Collections",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Page Model Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Configurations",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Configuration - Local Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"[test-id] Text-000\\r\\n[test-scenario]\\r\\nOpen a Web Site\\r\\n[test-actions]\\r\\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/}\\r\\n2. wait {1000}\\r\\n3. close browser\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {Carson} into {@search_text_box}\n4. click on {@search_button} using {css selector}\n5. wait for {3000} milliseconds\n6. register parameter {first_name} take {Jhon}\n7. close browser\n\n[test-expected-results]\n[1] assert {url} match {@url_expected}\n[5] assert {count} on {@students_table} is greater than {0}\n\n[test-data-provider]\n[\n\t{\n        \"url_expected\":\"gravitymvctestapplication.azurewebsites.net\",\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\n\t\t\"search_text_box\":\"//input[@id='SearchString']\",\n\t\t\"search_button\":\"#SearchButton\",\n\t\t\"students_table\": \"//td[@id]\"\n\t}\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Preconditions for _**Rhino**_ microservices.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Invoke Configuration Async",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// set variables\r",
									"pm.collectionVariables.set('invoke_id', jsonData.id);\r",
									"pm.collectionVariables.set('callback_request', 'Invoke Configuration by Configuration ID Async');\r",
									"postman.setNextRequest('Get Invoke Status');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('async_timeout_now', 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"[test-id] Text-000\\r\\n[test-scenario]\\r\\nOpen a Web Site\\r\\n[test-actions]\\r\\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/}\\r\\n2. wait {1000}\\r\\n3. close browser\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/async/configurations/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"configurations",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke Configuration by Configuration ID Async",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// set variables\r",
									"pm.collectionVariables.set('invoke_id', jsonData.id);\r",
									"pm.collectionVariables.set('callback_request', 'Invoke Collection by Configuration ID Async');\r",
									"postman.setNextRequest('Get Invoke Status');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('async_timeout_now', 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/async/configurations/invoke/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"configurations",
								"invoke",
								"{{configuration_id}}"
							]
						},
						"description": "## Invoke Configuration by ID\r\nInvokes (run) a _**Rhino Configuration**_.\r\n\r\n```\r\nGET /rhino/configurations/invoke/:id\r\n```\r\n\r\n|Name|Type  |Description                                       |\r\n|----|------|--------------------------------------------------|\r\n|id  |string|The ID of the _**Rhino Configuration**_ to invoke.|\r\n\r\n### Response Content\r\nThe response body follows the same format as [Invoke Configuration](#invoke-configuration) response content.\r\n\r\n### Response Codes\r\n|Code|Description                                                                |\r\n|----|---------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Test Run**_ is returned as part of the response.     |\r\n|400 |Bad Request, _**Rhino Configuration**_ was not provided or badly formatted.|\r\n|404 |Not Found, _**Rhino Configuration**_ was not found by the provided id.     |\r\n|500 |Fail, the server encountered an unexpected error.                          |"
					},
					"response": []
				},
				{
					"name": "Invoke Collection by Configuration ID Async",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// set variables\r",
									"pm.collectionVariables.set('invoke_id', jsonData.id);\r",
									"pm.collectionVariables.set('callback_request', 'Invoke Collection by Collection and Configuration ID(s) Async');\r",
									"postman.setNextRequest('Get Invoke Status');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('async_timeout_now', 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search_text_box}\r\n4. click on {@search_button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. register parameter {first_name} take {Jhon}\r\n7. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@url_expected}\r\n[5] assert {count} on {@students_table} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n        \"url_expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\r\n\t\t\"search_text_box\":\"//input[@id='SearchString']\",\r\n\t\t\"search_button\":\"#SearchButton\",\r\n\t\t\"students_table\": \"//td[@id]\"\r\n\t}\r\n]"
						},
						"url": {
							"raw": "{{endpoint}}/rhino/async/configurations/{{configuration_id}}/collections/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"configurations",
								"{{configuration_id}}",
								"collections",
								"invoke"
							]
						},
						"description": "Invokes (run) _**Rhino Spec**_ directly from the request body.\r\n\r\n```\r\nPOST /rhino/configurations/:configuration_id/collections/invoke\r\n```\r\n\r\n|Name            |Type  |Description                                                                     |\r\n|----------------|------|--------------------------------------------------------------------------------|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_ to use when invoke the _**Rhino Spec**_.|\r\n\r\n### Request Fields\r\nThe request body follows the same format as _**Get Test Case Collection**_ response content.\r\n\r\n### Request Example\r\nPlease see below for a typical request:\r\n\r\n```\r\n[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-002\r\n...\r\n```\r\n\r\n### Response Content\r\n\r\nThe response body follows the same format as [Run by Configuration](#run-by-configuration) response content.\r\n\r\n### Response Codes\r\n|Code|Description                                                         |\r\n|----|--------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Result**_ is returned as part of the response.|\r\n|400 |Bad Request, _**Rhino Configuration**_ was not provided.            |\r\n|404 |Not Found, the _**Rhino Configuration**_ was not found.             |\r\n|500 |Fail, the server encountered an unexpected error.                   |"
					},
					"response": []
				},
				{
					"name": "Invoke Collection by Collection and Configuration ID(s) Async",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// set variables\r",
									"pm.collectionVariables.set('invoke_id', jsonData.id);\r",
									"pm.collectionVariables.set('callback_request', 'Invoke Collection by Configurations - Parallel Async');\r",
									"postman.setNextRequest('Get Invoke Status');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('async_timeout_now', 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/rhino/async/configurations/{{configuration_id}}/collections/invoke/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"configurations",
								"{{configuration_id}}",
								"collections",
								"invoke",
								"{{collection_id}}"
							]
						},
						"description": "Invokes (run) _**Rhino Spec**_ directly from pre-existing collection & pre-existing configuration.\r\n\r\n```\r\nPOST /rhino/configurations/:configuration_id/collections/invoke/:collection_id\r\n```\r\n\r\n|Name            |Type  |Description                                                                     |\r\n|----------------|------|--------------------------------------------------------------------------------|\r\n|collection_id   |string|The ID of the _**Rhino Collection**_ to use.                                    |\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_ to use when invoke the _**Rhino Spec**_.|\r\n\r\n### Response Content\r\n\r\nThe response body follows the same format as [Run by Configuration](#run-by-configuration) response content.\r\n\r\n### Response Codes\r\n|Code|Description                                                                        |\r\n|----|-----------------------------------------------------------------------------------|\r\n|200 |Success, the _**Rhino Result**_ is returned as part of the response.               |\r\n|400 |Bad Request, _**Rhino Configuration**_ or _**Rhino Collection**_ were not provided.|\r\n|404 |Not Found, the _**Rhino Configuration**_  or _**Rhino Collection**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.                                  |"
					},
					"response": []
				},
				{
					"name": "Invoke Collection by Configurations - Parallel Async",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// set variables\r",
									"pm.collectionVariables.set('invoke_id', jsonData[0].id);\r",
									"pm.collectionVariables.set('callback_request', 'Get Invoke Status All');\r",
									"postman.setNextRequest('Get Invoke Status');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('async_timeout_now', 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/async/collections/invoke/{{collection_id}}?parallel=true",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"collections",
								"invoke",
								"{{collection_id}}"
							],
							"query": [
								{
									"key": "parallel",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Invoke Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// not found\r",
									"if(pm.response.status === 404) {\r",
									"    postman.setNextRequest(pm.collectionVariables.get('callback_request'));\r",
									"    console.log('Test status was not found, either test was completed or corrupted. Moving to next test.');\r",
									"}\r",
									"\r",
									"// ok\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// setup\r",
									"var jsonData = pm.response.json();\r",
									"var timeoutNow = parseInt(pm.collectionVariables.get('async_timeout_now'));\r",
									"var timeoutPooling = parseInt(pm.collectionVariables.get('async_pooling'));\r",
									"var isTimeout = parseInt(pm.collectionVariables.get('async_timeout')) < timeoutNow;\r",
									"\r",
									"// processing\r",
									"if(jsonData.status === 'Running' && !isTimeout) {\r",
									"    pm.test(\"Test is still running\", function () {\r",
									"        pm.expect(jsonData.status).to.equal('Running');\r",
									"    });\r",
									"\r",
									"    setTimeout(()=> {\r",
									"        pm.collectionVariables.set('async_timeout_now', timeoutNow + timeoutPooling);\r",
									"        postman.setNextRequest('Get Invoke Status');\r",
									"    }, timeoutPooling);\r",
									"}\r",
									"\r",
									"// complete\r",
									"if(jsonData.status !== 'Running' && !isTimeout) {\r",
									"    // test completed\r",
									"    pm.test(\"Test status is \" + jsonData.status, function () {\r",
									"        pm.expect(jsonData.status).to.not.equal('Running');\r",
									"    });\r",
									"\r",
									"    // test run has result\r",
									"    pm.test(\"Test run has result\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        var actual = jsonData.entityOut.actual ? true : false;\r",
									"        pm.expect(jsonData.entityOut.actual).equal(actual);\r",
									"    });\r",
									"\r",
									"    // test run has test cases\r",
									"    pm.test(\"Test run has test cases\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        var actual = jsonData.entityOut.testCases.length > 0 ? true : false;\r",
									"        pm.expect(actual).equal(true);\r",
									"    });\r",
									"\r",
									"    // set callback\r",
									"    postman.setNextRequest(pm.collectionVariables.get('callback_request')); \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/async/status/{{invoke_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"status",
								"{{invoke_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Invoke Status All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// setup\r",
									"var jsonData = pm.response.json();\r",
									"var query = [];\r",
									"\r",
									"// build\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    query.push('id=' + jsonData[i].runtimeId);\r",
									"}\r",
									"\r",
									"if(query.length > 1) {\r",
									"    query.splice(0 ,1);\r",
									"}\r",
									"\r",
									"// setup\r",
									"pm.collectionVariables.set('status_query', '?' + query.join('&'))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/async/status",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Invoke Status Multiple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/async/status{{status_query}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"status{{status_query}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Invoke Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/async/status/{{invoke_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"status",
								"{{invoke_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Invoke Status All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/async/status",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Documentation: Meta Data",
			"item": [
				{
					"name": "Get Plugins",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/plugins",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"plugins"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-plugins"
					},
					"response": []
				},
				{
					"name": "Get Plugin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/plugins/SendKeys",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"plugins",
								"SendKeys"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-plugin"
					},
					"response": []
				},
				{
					"name": "Get Assertions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/assertions",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"assertions"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-assertions"
					},
					"response": []
				},
				{
					"name": "Get Assertion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/assertions/attribute",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"assertions",
								"attribute"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-assertion"
					},
					"response": []
				},
				{
					"name": "Get Connectors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/connectors",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"connectors"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-connectors"
					},
					"response": []
				},
				{
					"name": "Get Connector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/connectors/ConnectorText",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"connectors",
								"ConnectorText"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-connector"
					},
					"response": []
				},
				{
					"name": "Get Drivers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/drivers",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"drivers"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-drivers"
					},
					"response": []
				},
				{
					"name": "Get Driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/drivers/ChromeDriver",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"drivers",
								"ChromeDriver"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-driver"
					},
					"response": []
				},
				{
					"name": "Get Locators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/locators",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"locators"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-locators"
					},
					"response": []
				},
				{
					"name": "Get Locator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/locators/LinkText",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"locators",
								"LinkText"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-locator"
					},
					"response": []
				},
				{
					"name": "Get Macros",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/macros",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"macros"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-macros"
					},
					"response": []
				},
				{
					"name": "Get Macro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/macros/alertxt",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"macros",
								"alertxt"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-macro"
					},
					"response": []
				},
				{
					"name": "Get Operators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/operators",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"operators"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-operators"
					},
					"response": []
				},
				{
					"name": "Get Operator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/operators/NE",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"operators",
								"NE"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-operator"
					},
					"response": []
				},
				{
					"name": "Get Reporters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/reporters",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"reporters"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-reporters"
					},
					"response": []
				},
				{
					"name": "Get Reporter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/reporters/ReporterBasic",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"reporters",
								"ReporterBasic"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-reporter"
					},
					"response": []
				},
				{
					"name": "Get Annotations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/annotations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"annotations"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-reporters"
					},
					"response": []
				},
				{
					"name": "Get Annotation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/annotations/test-id",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"annotations",
								"test-id"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-reporter"
					},
					"response": []
				},
				{
					"name": "Get Models",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Model Types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/models/Students Input Models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"models",
								"Students Input Models"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-reporter"
					},
					"response": []
				},
				{
					"name": "Get Verbs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/verbs",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"verbs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Attributes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/attributes",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Service Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/events/OnGetTestCases",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"events",
								"OnGetTestCases"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-reporter"
					},
					"response": []
				},
				{
					"name": "Get Service Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/events",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"events"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-reporter"
					},
					"response": []
				},
				{
					"name": "Get Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/services",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"services"
							]
						}
					},
					"response": []
				}
			],
			"description": "This guide explains how to access and use _**Meta**_ controller to get static data from Rhino server.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Documentation: Test Cases",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204,404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete All Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Tests Collection with Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{configuration_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Tests.md#create-tests-collection"
					},
					"response": []
				},
				{
					"name": "Create Tests Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Tests.md#create-tests-collection"
					},
					"response": []
				},
				{
					"name": "Get Associated Configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}",
								"configurations"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Tests.md#get-associated-configurations"
					},
					"response": []
				},
				{
					"name": "Get Tests Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Tests.md#get-tests-collection"
					},
					"response": []
				},
				{
					"name": "Get Tests Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Tests.md#get-tests-collections"
					},
					"response": []
				},
				{
					"name": "Add Tests to Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-003\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]\n\n>>>\n\n[test-id] rhino-documentation-004\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {gravity}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Tests.md#add-tests-to-collection"
					},
					"response": []
				},
				{
					"name": "Associate Configuration with Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}",
								"configurations",
								"{{configuration_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Tests.md#associate-configuration-with-collection"
					},
					"response": []
				},
				{
					"name": "Delete Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Tests.md#delete-tests-collection"
					},
					"response": []
				},
				{
					"name": "Delete All Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						},
						"description": "Deletes all existing _**Rhino Test Case**_ collections.\r\n\r\n```\r\nDELETE /api/v3/tests\r\n```\r\n  \r\n> Please Note: Deleting a collection cannot be undone and it can affect the configurations which were using the test cases.\r\n  \r\n### Response Codes\r\n|Code|Description                                           |\r\n|----|------------------------------------------------------|\r\n|204 |Success, the _**Test Case**_ collections were deleted.|\r\n|500 |Fail, the server encountered an unexpected error.     |"
					},
					"response": []
				}
			],
			"description": "This guide explains how to access and use _**Automation Collection API**_ to integrate automated tests, submit test results and automate various aspects of your application."
		},
		{
			"name": "Tests: Configuration",
			"item": [
				{
					"name": "Flow Action #01: Create Configuration - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"reporter_basic\",\r\n            \"reporter_warehouse\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #02: Create Configuration - Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #03: Update Configuration - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Configuration name updated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    return jsonData.name.includes(\"After Update\");\r",
									"});\r",
									"\r",
									"pm.test(\"Driver parameters count\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    return jsonData.driverParameters.length === 4;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox - After Update\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"EdgeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"IEDriverServer\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_user}}\",\r\n        \"userName\": \"{{rhino_password}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": false,\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": false,\r\n        \"addGravityData\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations",
								"{{configuration_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #04: Update Configuration - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_user}}\",\r\n        \"userName\": \"{{rhino_password}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": false,\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": false,\r\n        \"addGravityData\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations/not_an_id",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations",
								"not_an_id"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #05: Update Configuration - Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"connector\": \"ConnectorText\",\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_user}}\",\r\n        \"userName\": \"{{rhino_password}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": false,\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": false,\r\n        \"addGravityData\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations",
								"{{configuration_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #06: Delete Configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #07: Get Configurations - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Configurtions count\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    return jsonData.length === 0;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #08: Get Configuration - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations",
								"{{configuration_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #09: Create Configuration - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #10: Create Configuration - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #11: Get Configurations - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Driver parameters count\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    return jsonData.length === 2;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #12: Get Configuration - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations",
								"{{configuration_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #13: Delete Configuration - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations",
								"{{configuration_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #14: Delete Configuration - Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations",
								"{{configuration_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #15: Create Configuration - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #16: Get Configurations - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Driver parameters count\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    return jsonData.length === 2;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #17: Delete Configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #18: Get Configurations - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Driver parameters count\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    return jsonData.length === 0;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests: Debug Automation",
			"item": [
				{
					"name": "Debug - Step #1 - Create - Go To Url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('session_id', jsonData.extractions[0].orbitSession.sessionsId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Authentication\": {\r\n        \"Password\": \"{{rhino_password}}\",\r\n        \"UserName\": \"{{rhino_user}}\"\r\n    },\r\n    \"EngineConfiguration\": {\r\n        \"ElementSearchingTimeout\": 15000,\r\n        \"PageLoadTimeout\": 60000\r\n    },\r\n    \"ScreenshotsConfiguration\": {\r\n        \"KeepOriginal\": false,\r\n        \"ReturnScreenshots\": {{use_reports}}\r\n    },\r\n    \"DriverParams\": \"{\\\"driver\\\": \\\"ChromeDriver\\\", \\\"driverBinaries\\\": \\\"{{rhino_drivers}}\\\"}\",\r\n    \"Actions\": [\r\n        {\r\n            \"ActionType\": \"GoToUrl\",\r\n            \"Argument\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/debug",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"debug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug - Step #2 - Assert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Authentication\": {\r\n        \"Password\": \"{{rhino_password}}\",\r\n        \"UserName\": \"{{rhino_user}}\"\r\n    },\r\n    \"EngineConfiguration\": {\r\n        \"ElementSearchingTimeout\": 15000,\r\n        \"PageLoadTimeout\": 60000\r\n    },\r\n    \"ScreenshotsConfiguration\": {\r\n        \"KeepOriginal\": false,\r\n        \"ReturnScreenshots\": true\r\n    },\r\n    \"DriverParams\": \"{{session_id}}\",\r\n    \"Actions\": [\r\n        {\r\n            \"ActionType\": \"Assert\",\r\n            \"Argument\": \"{{$ --url --match:gravitymvctestapplication.azurewebsites.net}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/debug",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"debug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug - Step #3 - Close All Child Windows",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Authentication\": {\r\n        \"Password\": \"{{rhino_password}}\",\r\n        \"UserName\": \"{{rhino_user}}\"\r\n    },\r\n    \"EngineConfiguration\": {\r\n        \"ElementSearchingTimeout\": 15000,\r\n        \"PageLoadTimeout\": 60000\r\n    },\r\n    \"ScreenshotsConfiguration\": {\r\n        \"KeepOriginal\": false,\r\n        \"ReturnScreenshots\": true\r\n    },\r\n    \"DriverParams\": \"{{session_id}}\",\r\n    \"Actions\": [\r\n        {\r\n            \"ActionType\": \"CloseAllChildWindows\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/debug",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"debug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug - Step #4 - Send Keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Authentication\": {\r\n        \"Password\": \"{{rhino_password}}\",\r\n        \"UserName\": \"{{rhino_user}}\"\r\n    },\r\n    \"EngineConfiguration\": {\r\n        \"ElementSearchingTimeout\": 15000,\r\n        \"PageLoadTimeout\": 60000\r\n    },\r\n    \"ScreenshotsConfiguration\": {\r\n        \"KeepOriginal\": false,\r\n        \"ReturnScreenshots\": true\r\n    },\r\n    \"DriverParams\": \"{{session_id}}\",\r\n    \"Actions\": [\r\n        {\r\n            \"ActionType\": \"SendKeys\",\r\n            \"ElementToActOn\": \"//input[@id='SearchString']\",\r\n            \"Argument\": \"Carson\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/debug",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"debug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug - Step #5 - Click",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Authentication\": {\r\n        \"Password\": \"{{rhino_password}}\",\r\n        \"UserName\": \"{{rhino_user}}\"\r\n    },\r\n    \"EngineConfiguration\": {\r\n        \"ElementSearchingTimeout\": 15000,\r\n        \"PageLoadTimeout\": 60000\r\n    },\r\n    \"ScreenshotsConfiguration\": {\r\n        \"KeepOriginal\": false,\r\n        \"ReturnScreenshots\": true\r\n    },\r\n    \"DriverParams\": \"{{session_id}}\",\r\n    \"Actions\": [\r\n        {\r\n            \"ActionType\": \"Click\",\r\n            \"Locator\": \"CssSelector\",\r\n            \"ElementToActOn\": \"#SearchButton\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/debug",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"debug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug - Step #6 - Wait",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Authentication\": {\r\n        \"Password\": \"{{rhino_password}}\",\r\n        \"UserName\": \"{{rhino_user}}\"\r\n    },\r\n    \"EngineConfiguration\": {\r\n        \"ElementSearchingTimeout\": 15000,\r\n        \"PageLoadTimeout\": 60000\r\n    },\r\n    \"ScreenshotsConfiguration\": {\r\n        \"KeepOriginal\": false,\r\n        \"ReturnScreenshots\": true\r\n    },\r\n    \"DriverParams\": \"{{session_id}}\",\r\n    \"Actions\": [\r\n        {\r\n            \"ActionType\": \"Wait\",\r\n            \"Argument\": \"3000\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/debug",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"debug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug - Step #7 - Assert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Authentication\": {\r\n        \"Password\": \"{{rhino_password}}\",\r\n        \"UserName\": \"{{rhino_user}}\"\r\n    },\r\n    \"EngineConfiguration\": {\r\n        \"ElementSearchingTimeout\": 15000,\r\n        \"PageLoadTimeout\": 60000\r\n    },\r\n    \"ScreenshotsConfiguration\": {\r\n        \"KeepOriginal\": false,\r\n        \"ReturnScreenshots\": true\r\n    },\r\n    \"DriverParams\": \"{{session_id}}\",\r\n    \"Actions\": [\r\n        {\r\n            \"ActionType\": \"Assert\",\r\n            \"ElementToActOn\": \"//td[@id]\",\r\n            \"Argument\": \"{{$ --count --gt:0}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/debug",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"debug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug - Step #8 - Register Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Authentication\": {\r\n        \"Password\": \"{{rhino_password}}\",\r\n        \"UserName\": \"{{rhino_user}}\"\r\n    },\r\n    \"EngineConfiguration\": {\r\n        \"ElementSearchingTimeout\": 15000,\r\n        \"PageLoadTimeout\": 60000\r\n    },\r\n    \"ScreenshotsConfiguration\": {\r\n        \"KeepOriginal\": false,\r\n        \"ReturnScreenshots\": true\r\n    },\r\n    \"DriverParams\": \"{{session_id}}\",\r\n    \"Actions\": [\r\n        {\r\n            \"ActionType\": \"RegisterParameter\",\r\n            \"ElementToActOn\": \"Jhon\",\r\n            \"Argument\": \"first_name\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/debug",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"debug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug - Step #9 - Close Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"DataSource\": null,\r\n    \"Authentication\": {\r\n        \"Password\": \"{{rhino_password}}\",\r\n        \"UserName\": \"{{rhino_user}}\"\r\n    },\r\n    \"EngineConfiguration\": {\r\n        \"ElementSearchingTimeout\": 15000,\r\n        \"PageLoadTimeout\": 60000\r\n    },\r\n    \"ScreenshotsConfiguration\": {\r\n        \"KeepOriginal\": false,\r\n        \"ReturnScreenshots\": true\r\n    },\r\n    \"DriverParams\": \"{{session_id}}\",\r\n    \"Actions\": [\r\n        {\r\n            \"ActionType\": \"CloseBrowser\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/debug",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"debug"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests: Environment",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/environment",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"environment"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Flow Action #1 - Create Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"param1value\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "param1value",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/environment/param1",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"param1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #2 - Create Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"param2value\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "param2value",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/environment/param2",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"param2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #3 - Create Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"param3value\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "param3value"
						},
						"url": {
							"raw": "{{endpoint}}/environment/param3",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"param3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sync Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Number of parameters is 3\", function () {\r",
									"    var length = Object.keys(JSON.parse(responseBody)).length;\r",
									"    pm.expect(length).to.equal(3); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment/sync",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sync Parameters - Different User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password",
									"type": "string"
								},
								{
									"key": "username",
									"value": "user",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment/sync",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #4 - Get Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"param3value\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment/param3",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"param3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #5 - Get Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Number of parameters is 3\", function () {\r",
									"    var length = Object.keys(JSON.parse(responseBody)).length;\r",
									"    pm.expect(length).to.equal(3); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #6- Update Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"param3newvalue\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "param3newvalue"
						},
						"url": {
							"raw": "{{endpoint}}/environment/param3",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"param3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #7 - Get Parameter Old",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).not.to.include(\"param3value\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment/param3",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"param3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #8 - Get Parameter New",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"param3newvalue\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment/param3",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"param3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #9 - Delete Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment/param3",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"param3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #10 - Get Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment/param3",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment",
								"param3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #11 - Get Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Number of parameters is 2\", function () {\r",
									"    var length = Object.keys(JSON.parse(responseBody)).length;\r",
									"    pm.expect(length).to.equal(2); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #12 - Delete Parameters",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #13 - Get Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Number of parameters is 0\", function () {\r",
									"    var length = Object.keys(JSON.parse(responseBody)).length;\r",
									"    pm.expect(length).to.equal(0); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/environment",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"environment"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests: Logs & Analysis",
			"item": [
				{
					"name": "Flow Action #01: Get Logs Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Logs found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var id = jsonData[0].substr(9, 8);\r",
									"pm.collectionVariables.set(\"log_id\", id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/logs",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"logs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #02: Get Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Log returned and populated\", function () {\r",
									"    var text = pm.response.text();\r",
									"\r",
									"    var re=/\\r\\n|\\n\\r|\\n|\\r/g;\r",
									"    var lines = text.replace(re,\"\\n\").split(\"\\n\");\r",
									"\r",
									"    pm.expect(lines.length).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/logs/{{log_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"logs",
								"{{log_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #03: Get Logs - Last Number of Lines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Log returned and populated\", function () {\r",
									"    var text = pm.response.text();\r",
									"\r",
									"    var re=/\\r\\n|\\n\\r|\\n|\\r/g;\r",
									"    var lines = text.replace(re,\"\\n\").split(\"\\n\");\r",
									"\r",
									"    pm.expect(lines.length).to.be.equal(20);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/logs/{{log_id}}/size/20",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"logs",
								"{{log_id}}",
								"size",
								"20"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #04: Get Logs - Export",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Log returned and populated\", function () {\r",
									"    var text = pm.response.text();\r",
									"\r",
									"    var re=/\\r\\n|\\n\\r|\\n|\\r/g;\r",
									"    var lines = text.replace(re,\"\\n\").split(\"\\n\");\r",
									"\r",
									"    pm.expect(lines.length).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/logs/{{log_id}}/export",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"logs",
								"{{log_id}}",
								"export"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests: Page Models",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204,404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete All Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sanity",
					"item": [
						{
							"name": "Flow Action #01: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n  \"testsRepository\": [],\r\n  \"driverParameters\": [\r\n    {\r\n      \"driver\": \"ChromeDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    },\r\n    {\r\n      \"driver\": \"FirefoxDriver\",\r\n      \"driverBinaries\": \"{{rhino_drivers}}\"\r\n    }\r\n  ],\r\n  \"dataSource\": [],\r\n  \"models\": [],\r\n  \"authentication\": {\r\n    \"password\": \"{{rhino_password}}\",\r\n    \"userName\": \"{{rhino_user}}\"\r\n  },\r\n  \"engineConfiguration\": {\r\n    \"maxParallel\": 1,\r\n    \"failOnException\": false,\r\n    \"optimalThreshold\": 3,\r\n    \"qualityThreshold\": 0,\r\n    \"toleranceThreshold\": 0,\r\n    \"priority\": 0,\r\n    \"severity\": 0,\r\n    \"errorOnExitCode\": 0,\r\n    \"elementSearchingTimeout\": 15000,\r\n    \"pageLoadTimeout\": 60000,\r\n    \"retrunExceptions\": true,\r\n    \"returnPerformancePoints\": true,\r\n    \"returnEnvironment\": true,\r\n    \"terminateOnAssertFailure\": false\r\n  },\r\n  \"screenshotsConfiguration\": {\r\n    \"keepOriginal\": false,\r\n    \"returnScreenshots\": false,\r\n    \"onExceptionOnly\": false\r\n  },\r\n  \"reportConfiguration\": {\r\n    \"reporters\": [\r\n      \"reporter_basic\",\r\n      \"reporter_warehouse\"\r\n    ],\r\n    \"archive\": false,\r\n    \"localReport\": true,\r\n    \"addGravityData\": true\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Models Collection  with Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Create Models Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 2\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #04: Create Models Collection - Same Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 2\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #05: Create Models Collection - No Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[ ]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #06: Create Models Collection - No Entries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 2\",\r\n    \"entries\": [],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #07: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 2;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #08: Get Models Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.models.length === 1;\r",
											"});\r",
											"\r",
											"pm.test(\"Entries count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.models[0].entries.length === 1;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #09: Get Models Collection - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/not_a_collection",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"not_a_collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #10: Get Associated Configurations - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Configurations count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 1;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #11: Get Associated Configurations - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/not_a_collection/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"not_a_collection",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #12: Create Models Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 3\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"value\": \"#SearchString\",\r\n        \"type\": \"css selector\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #13: Get Associated Configurations - Configuration Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Configurations count is 0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 0;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #14: Add Models - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.models.length === 1;\r",
											"});\r",
											"\r",
											"pm.test(\"Entries count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.models[0].entries.length === 1;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 4\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"type\": \"css selector\",\r\n        \"value\": \"#SearchString\",\r\n        \"model\": \"Students Input Models - 3\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"type\": \"Xpath\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"model\": \"Students Input Models - 3\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #15: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 4\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 4;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #16: Add Models - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"name\": \"Students Input Models - 4\",\r\n    \"entries\": [\r\n      {\r\n        \"name\": \"search students text-box\",\r\n        \"type\": \"css selector\",\r\n        \"value\": \"#SearchString\",\r\n        \"model\": \"Students Input Models - 3\",\r\n        \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n      },\r\n      {\r\n        \"name\": \"search students button\",\r\n        \"type\": \"Xpath\",\r\n        \"value\": \"//input[@id='SearchButton']\",\r\n        \"model\": \"Students Input Models - 3\",\r\n        \"comment\": \"Search students button on the top center panel under students page.\"\r\n      }\r\n    ],\r\n    \"context\": {\r\n      \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n    }\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/not_a_collection",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"not_a_collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #17: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 4\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 4;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #18: Add Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 2;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #19: Add Configuration - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/not_a_collection/configurations/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"not_a_collection",
										"configurations",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #20: Add Configuration - Configuration Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}/configurations/not_a_configuration",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}",
										"configurations",
										"not_a_configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #21: Delete Collection - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #22: Delete Collection - Collection Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models/{{collection_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #23: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 3;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #24: Delete Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #25: Get Models Collections - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Models count is 0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    return jsonData.length === 0;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #26: Create Models Markdown - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/** Sepcifications:\r\n/** 1. empty values are not allowd\r\n/** 2. when value in unknown use -1 as a placeholder\r\n/**\r\n[test-models] Students Input Models - From Markdown - 2\r\n|name                             |value                      |type         |comment                  |\r\n|---------------------------------|---------------------------|-------------|-------------------------|\r\n|(md) search students text-box - 2|#SearchString              |css selector |Search students text-box.|\r\n|(md) search students button - 2  |//input[@id='SearchButton']|xpath        |Search students button.  |",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/md",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"md"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #27: Create Models with Configuration Markdown - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/** Sepcifications:\r\n/** 1. empty values are not allowd\r\n/** 2. when value in unknown use -1 as a placeholder\r\n/**\r\n[test-models] Students Input Models - From Markdown\r\n|name                         |value                      |type         |comment                  |\r\n|-----------------------------|---------------------------|-------------|-------------------------|\r\n|(md) search students text-box|#SearchString              |css selector |Search students text-box.|\r\n|(md) search students button  |//input[@id='SearchButton']|xpath        |Search students button.  |",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/md",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"md"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Integration",
					"item": [
						{
							"name": "Flow Action #01: Create Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"dataProvider\": null,\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Models Collection  with Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"name\": \"Students Input Models\",\r\n        \"entries\": [\r\n            {\r\n                \"name\": \"search students text-box\",\r\n                \"value\": \"#SearchString\",\r\n                \"type\": \"css selector\",\r\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n            },\r\n            {\r\n                \"name\": \"search students button\",\r\n                \"value\": \"//input[@id='SearchButton']\",\r\n                \"comment\": \"Search students button on the top center panel under students page.\"\r\n            }\r\n        ],\r\n        \"context\": {\r\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n        }\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/models/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Create Tests Collection  with Configuration - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student}\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {search students text-box}\r\n4. click on {search students button}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {gravitymvctestapplication.azurewebsites.net}\r\n[5] assert {count} on {//td[@id]} is greater than {0}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Models.md",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tests: Plugins",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Plugins - Public",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								},
								"description": "Deletes all existing _**Rhino Plugin**_.\r\n\r\n```\r\nDELETE /api/v3/configurations\r\n```\r\n\r\n> Please Note: Deleting a plugin cannot be undone and can affect test cases.\r\n\r\n### Response Codes\r\n|Code|Description                                      |\r\n|----|-------------------------------------------------|\r\n|204 |Success, the _**Rhino Plugins**_ were deleted.   |\r\n|404 |Not Found, the _**Rhino Plugin**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.|"
							},
							"response": []
						},
						{
							"name": "Delete Plugins - Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								},
								"description": "Deletes all existing _**Rhino Plugin**_.\r\n\r\n```\r\nDELETE /api/v3/configurations\r\n```\r\n\r\n> Please Note: Deleting a plugin cannot be undone and can affect test cases.\r\n\r\n### Response Codes\r\n|Code|Description                                      |\r\n|----|-------------------------------------------------|\r\n|204 |Success, the _**Rhino Plugins**_ were deleted.   |\r\n|404 |Not Found, the _**Rhino Plugin**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.|"
							},
							"response": []
						}
					]
				},
				{
					"name": "Sanity",
					"item": [
						{
							"name": "Flow Action #01: Create Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|"
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Plugins Repeat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|"
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Create Plugins - Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('8');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        PrivateCircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        PrivateSearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        PrivateSearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        PrivateSearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|"
								},
								"url": {
									"raw": "{{endpoint}}/plugins?prvt=true",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "prvt",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #04: Get Plugin - Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 1\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/SearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"SearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #05: Get Plugin - Positive Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 1\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/PrivateSearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"PrivateSearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #06: Get Plugin - Private No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/PrivateSearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"PrivateSearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #07: Get Plugin - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/NotAPlugin",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"NotAPlugin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #08: Delete Plugin - Private No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/PrivateSearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"PrivateSearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #09: Delete Plugin - Private Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/PrivateSearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"PrivateSearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #10: Get Plugins - Positive Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 7\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('7');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #11: Delete Plugin - Positive with Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/SearchStudent",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"SearchStudent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #12: Delete Plugin - Positive without Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins/SearchCourses",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins",
										"SearchCourses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #13: Get Plugins - Positive Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 5\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('5');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #14: Delete All Plugins - No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #15: Get Plugins - Positive Private",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 3\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('3');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #16: Create Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        SearchStudentAndCourses\r\n[test-scenario]  Verify student last name when searching by first name (Students Page) & Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. search student {{$ --first_name:first_name --last_name:last_name}\r\n2. search courses {{$ --department:Economics --total:2}}\r\n\r\n[test-examples]\r\n|Example                                                                   |Description                                                                                                                                                  |\r\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|search student and courses {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name. Performs courses search by department name and validated number of courses in that department.|"
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #17: Create Plugins Private User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 6\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('6');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        Private2CircularSearch\r\n[test-scenario]  Performs a circular students search by calling itself (Students Page).\r\n\r\n[test-parameters]\r\nfirst_name\r\nlast_name\r\n\r\n[test-actions]\r\n1. send keys {first_name} into {#SearchString} using {css selector}\r\n2. click on {//input[@id='SearchButton']}\r\n3. circular search student {{$ --first_name:foo --last_name:bar}}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {first_name}\r\n[2] verify that {text} of {//td[contains(@id,'student_last_name_')]} match {last_name}\r\n\r\n[test-examples]\r\n|Example                                                        |Description                                                   |\r\n|---------------------------------------------------------------|--------------------------------------------------------------|\r\n|circular search {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|\r\n\r\n>>>\r\n\r\n[test-id]        Private2SearchCourses\r\n[test-scenario]  Verify courses number when searching courses by department (Courses Page).\r\n\r\n[test-parameters]\r\ndepartment\r\ntotal\r\n\r\n[test-actions]\r\n1. click on {Courses} using {link text}\r\n2. select from combo box {department} take {SelectedDepartment} using id\r\n3. click on {//input[@value='Filter']}\r\n\r\n[test-expected-results]\r\n[3] verify that {count} on {//tbody/tr} equal {total}\r\n\r\n[test-examples]\r\n|Example                                              |Description                                                                                   |\r\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\r\n|search courses {{$ --department:Economics --total:2}}|Performs courses search by department name and validated number of courses in that department.|"
								},
								"url": {
									"raw": "{{endpoint}}/plugins?prvt=true",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "prvt",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #18: Delete All Plugins - Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #19: Get Plugins - Positive User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 6\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('6');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #20: Delete All Plugins - Credentials User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #21: Get Plugins - Positive Private User #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #22: Get Plugins - Positive Private User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 4\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('4');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #23: Delete All Plugins - Public No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #24: Get Plugins - Positive Private User #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 0\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('0');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										},
										{
											"key": "username",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #25: Get Plugins - Positive Private User #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 0\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('0');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "user2@rhino.api",
											"type": "string"
										},
										{
											"key": "password",
											"value": "user@rhino.api",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{rhino_password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{rhino_user}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Integration",
					"item": [
						{
							"name": "Flow Action #01: Create Plugins",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Plugins count is 1\", () => {\r",
											"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id]        SearchStudent\r\n[test-scenario]  Verify student last name when searching by first name (Students Page).\r\n\r\n[test-parameters]\r\n|Parameter |Description                                            |\r\n|----------|-------------------------------------------------------|\r\n|first_name|Student first name. Will be used for searching student.|\r\n|last_name |Student last name. Will be used asserting results.     |\r\n\r\n[test-actions]\r\n1. send keys {@first_name} into {#SearchString} using {css selector}\r\n2. click on {#SearchButton} using {css selector}\r\n\r\n[test-expected-results]\r\n[2] verify that {url} match {(?i)student}\r\n[2] verify that {attribute} of {#SearchString} using {css selector} from {value} match {@first_name}\r\n[2] verify that {text} of {//TD[contains(@id,'student_last_name_')]} match {@last_name}\r\n\r\n[test-examples]\r\n|Example                                                       |Description                                                   |\r\n|--------------------------------------------------------------|--------------------------------------------------------------|\r\n|search student {{$ --first_name:Carson --last_name:Alexander}}|Performs student search by first name and validated last name.|"
								},
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #02: Create Configuration - Local Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_user}}\",\r\n        \"userName\": \"{{rhino_password}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #03: Run by Collection (one configuration)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No failed tests\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.totalFail).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. search student {{$ --first_name:Carson --last_name:Alexander}}\r\n5. wait for {3000} milliseconds\r\n6. close browser"
								},
								"url": {
									"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}/collections/invoke",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"rhino",
										"configurations",
										"{{configuration_id}}",
										"collections",
										"invoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "Flow Action #04: Delete Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								},
								"description": "Delete all configurations"
							},
							"response": []
						},
						{
							"name": "Flow Action #05: Delete All Plugins - Public No Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/plugins",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"plugins"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Plugins.md",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tests: Rhino",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Test Case Collections",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Page Model Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Configurations",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Configuration - Local Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"[test-id] Text-000\\r\\n[test-scenario]\\r\\nOpen a Web Site\\r\\n[test-actions]\\r\\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/}\\r\\n2. wait {1000}\\r\\n3. close browser\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {Carson} into {@search_text_box}\n4. click on {@search_button} using {css selector}\n5. wait for {3000} milliseconds\n6. register parameter {first_name} take {Jhon}\n7. close browser\n\n[test-expected-results]\n[1] assert {url} match {@url_expected}\n[5] assert {count} on {@students_table} is greater than {0}\n\n[test-data-provider]\n[\n\t{\n        \"url_expected\":\"gravitymvctestapplication.azurewebsites.net\",\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\n\t\t\"search_text_box\":\"//input[@id='SearchString']\",\n\t\t\"search_button\":\"#SearchButton\",\n\t\t\"students_table\": \"//td[@id]\"\n\t}\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Action Flow #01: Invoke Configuration - Flat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test run passed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actual).equal(true);\r",
									"});\r",
									"\r",
									"// all tests passed\r",
									"var jsonData = pm.response.json().testCases;\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    pm.test(\"Test case \" + (i + 1) + \" passed\", function () {\r",
									"        pm.expect(jsonData[i].actual && jsonData[i].inconclusive).equal(true);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"[test-id] Text-000\\r\\n[test-scenario]\\r\\nOpen a Web Site\\r\\n[test-actions]\\r\\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/}\\r\\n2. wait {1000}\\r\\n3. close browser\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/configurations/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"configurations",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #01: Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #02: Create Models Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('models_collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"Students Input Models\",\r\n        \"entries\": [\r\n            {\r\n                \"name\": \"search students text-box\",\r\n                \"value\": \"#SearchString\",\r\n                \"type\": \"css selector\",\r\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n            },\r\n            {\r\n                \"name\": \"search students button\",\r\n                \"value\": \"//input[@id='SearchButton']\",\r\n                \"comment\": \"Search students button on the top center panel under students page.\"\r\n            }\r\n        ],\r\n        \"context\": {\r\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n        }\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Action Flow #02: Invoke Configuration - Flat with Modles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test run passed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actual).equal(true);\r",
									"});\r",
									"\r",
									"// all tests passed\r",
									"var jsonData = pm.response.json().testCases;\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    pm.test(\"Test case \" + (i + 1) + \" passed\", function () {\r",
									"        pm.expect(jsonData[i].actual && !jsonData[i].inconclusive).equal(true);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"[test-id] Text-001\\n[test-scenario] search students\\n\\n[test-actions]\\ngo to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\\nsend keys {Carson} into {search students text-box}\\nclick on {search students button}\\nclose browser\\n\\n[test-expected-results]\\n[3] assert {count} on {//td[@id]} is greater than {0}\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [\r\n        \"{{models_collection_id}}\"\r\n    ],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/configurations/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"configurations",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #03: Delete Test Case Collections",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #04: Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #05: Create Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-001\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {Carson} into {@search_text_box}\n4. click on {@search_button} using {css selector}\n5. wait for {3000} milliseconds\n6. register parameter {first_name} take {Jhon}\n7. close browser\n\n[test-expected-results]\n[1] assert {url} match {@url_expected}\n[5] assert {count} on {@students_table} is greater than {0}\n\n[test-data-provider]\n[\n\t{\n        \"url_expected\":\"gravitymvctestapplication.azurewebsites.net\",\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\n\t\t\"search_text_box\":\"//input[@id='SearchString']\",\n\t\t\"search_button\":\"#SearchButton\",\n\t\t\"students_table\": \"//td[@id]\"\n\t}\n]",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Action Flow #03: Invoke Configuration - Flat with Tests Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test run passed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actual).equal(true);\r",
									"});\r",
									"\r",
									"// all tests passed\r",
									"var jsonData = pm.response.json().testCases;\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    pm.test(\"Test case \" + (i + 1) + \" passed\", function () {\r",
									"        pm.expect(jsonData[i].actual && !jsonData[i].inconclusive).equal(true);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"{{collection_id}}\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/configurations/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"configurations",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #06: Delete Test Case Collections",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #07: Create Models Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('models_collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"Students Input Models\",\r\n        \"entries\": [\r\n            {\r\n                \"name\": \"search students text-box\",\r\n                \"value\": \"#SearchString\",\r\n                \"type\": \"css selector\",\r\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n            },\r\n            {\r\n                \"name\": \"search students button\",\r\n                \"value\": \"//input[@id='SearchButton']\",\r\n                \"comment\": \"Search students button on the top center panel under students page.\"\r\n            }\r\n        ],\r\n        \"context\": {\r\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n        }\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #08: Create Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] Text-001\n[test-scenario] search students\n\n[test-actions]\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\n2. send keys {Carson} into {search students text-box}\n3. click on {search students button}\n4. close browser\n\n[test-expected-results]\n[3] assert {count} on {//td[@id]} is greater than {0}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Action Flow #04: Invoke Configuration - Flat with Tests Collection & Models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test run passed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actual).equal(true);\r",
									"});\r",
									"\r",
									"// all tests passed\r",
									"var jsonData = pm.response.json().testCases;\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    pm.test(\"Test case \" + (i + 1) + \" passed\", function () {\r",
									"        pm.expect(jsonData[i].actual && !jsonData[i].inconclusive).equal(true);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"{{collection_id}}\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [\r\n        \"{{models_collection_id}}\"\r\n    ],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/configurations/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"configurations",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #09: Delete Test Case Collections",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #10: Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #11: Delete Configurations",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #12: Create Configuration - Local Driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"[test-id] Text-000\\r\\n[test-scenario]\\r\\nOpen a Web Site\\r\\n[test-actions]\\r\\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/}\\r\\n2. wait {1000}\\r\\n3. close browser\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #05: Invoke Configuration by Configuration ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test run passed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actual).equal(true);\r",
									"});\r",
									"\r",
									"// all tests passed\r",
									"var jsonData = pm.response.json().testCases;\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    pm.test(\"Test case \" + (i + 1) + \" passed\", function () {\r",
									"        pm.expect(jsonData[i].actual && jsonData[i].inconclusive).equal(true);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/configurations/invoke/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"configurations",
								"invoke",
								"{{configuration_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #13: Delete Test Case Collections",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #14: Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #06: Invoke Collection by Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test run passed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actual).equal(true);\r",
									"});\r",
									"\r",
									"// all tests passed\r",
									"var jsonData = pm.response.json().testCases;\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    pm.test(\"Test case \" + (i + 1) + \" passed\", function () {\r",
									"        pm.expect(jsonData[i].actual && !jsonData[i].inconclusive).equal(true);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search_text_box}\r\n4. click on {@search_button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. register parameter {first_name} take {Jhon}\r\n7. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@url_expected}\r\n[5] assert {count} on {@students_table} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n        \"url_expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\r\n\t\t\"search_text_box\":\"//input[@id='SearchString']\",\r\n\t\t\"search_button\":\"#SearchButton\",\r\n\t\t\"students_table\": \"//td[@id]\"\r\n\t}\r\n]"
						},
						"url": {
							"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}/collections/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"configurations",
								"{{configuration_id}}",
								"collections",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #07: Invoke Collection by Configuration - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Message status code is 404\", function () {\r",
									"    pm.expect(jsonData.status).equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Have error\", function () {\r",
									"    pm.expect(jsonData.errors.$.length).greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Have route\", function () {\r",
									"    pm.expect(jsonData.routeData.id).equal('not_a_configuration');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search_text_box}\r\n4. click on {@search_button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. register parameter {first_name} take {Jhon}\r\n7. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@url_expected}\r\n[5] assert {count} on {@students_table} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n        \"url_expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\r\n\t\t\"search_text_box\":\"//input[@id='SearchString']\",\r\n\t\t\"search_button\":\"#SearchButton\",\r\n\t\t\"students_table\": \"//td[@id]\"\r\n\t}\r\n]"
						},
						"url": {
							"raw": "{{endpoint}}/rhino/configurations/not_a_configuration/collections/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"configurations",
								"not_a_configuration",
								"collections",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #15: Create Models Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('models_collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"Students Input Models\",\r\n        \"entries\": [\r\n            {\r\n                \"name\": \"search students text-box\",\r\n                \"value\": \"#SearchString\",\r\n                \"type\": \"css selector\",\r\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n            },\r\n            {\r\n                \"name\": \"search students button\",\r\n                \"value\": \"//input[@id='SearchButton']\",\r\n                \"comment\": \"Search students button on the top center panel under students page.\"\r\n            }\r\n        ],\r\n        \"context\": {\r\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n        }\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #16: Create Configuration - Local Driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [\r\n        \"{{models_collection_id}}\"\r\n    ],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 5,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #17: Create Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Tests count is 1\", () => {\r",
									"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] Text-001\n[test-scenario] search students\n\n[test-actions]\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\n2. send keys {Carson} into {search students text-box}\n3. click on {search students button}\n4. close browser\n\n[test-expected-results]\n[3] assert {count} on {//td[@id]} is greater than {0}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #18: Add Tests to Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Tests count is 3\", () => {\r",
									"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('3');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] Text-002\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {automation}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]\n\n>>>\n\n[test-id] Text-003\n[test-scenario] search on google.com web-site - positive\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {automation} into {@search-box} text-box (search text-box)\n4. click on the first {@auto-complete-item}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@address-expected}\n[3] assert on {@search-box} get value from {value} attribute must match {automation}\n\n[test-data-provider]\n[\n\t{\n\t\t\"address\":\"https://www.google.com/\",\n\t\t\"address-expected\":\"google.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@role='listbox']/li\"\n\t},\n\t{\n\t\t\"address\":\"https://www.bing.com/\",\n\t\t\"address-expected\":\"bing.com\",\n\t\t\"search-box\":\"//input[@name='q']\",\n\t\t\"auto-complete-item\":\"//ul[@id='sa_ul']/li\"\n\t}\n]",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}"
							]
						},
						"description": "Add additional _**Rhino Test Cases**_ into an existing collection.  \r\n\r\n> Please note, there is no duplication check here, and you can add tests with the same ID.\r\n> However, Rhino Engine, will not execute them, since it will distinct all IDs before running automation.\r\n\r\n```\r\nPATCH /api/v3/tests/:collection_id\r\n```\r\n\r\n|Name         |Type  |Description                                    |\r\n|-------------|------|-----------------------------------------------|\r\n|collection_id|string|The ID of the _**Rhino Test Case**_ collection.|\r\n\r\n### Request Fields\r\nThe request body follows the same format as [Get Test Case Collection](#get-test-case-collection) response content.\r\n\r\n### Request Example\r\n```\r\n[test-id] rhino-documentation-003\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n  {\r\n    \"address\": \"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n    \"address-expected\": \"gravitymvctestapplication.azurewebsites.net\",\r\n    \"search-text-box\": \"//input[@id='SearchString']\",\r\n    \"search-button\": \"#SearchButton\",\r\n    \"students-table\": \"//td[@id]\"\r\n  }\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-004\r\n...\r\n```\r\n\r\n### Response Codes\r\n|Code|Description                                                        |\r\n|----|-------------------------------------------------------------------|\r\n|200 |Success, the _**Collection**_ was returned as part of the response.|\r\n|400 |Bad Request, no test cases were provided in the request body.      |\r\n|404 |Not Found, the _**Collection**_ was not found.                     |\r\n|500 |Fail, the server encountered an unexpected error.                  |"
					},
					"response": []
				},
				{
					"name": "Flow Action #8: Invoke Collection by Collection & Configuration ID(s)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test run passed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actual).equal(true);\r",
									"});\r",
									"\r",
									"// all tests passed\r",
									"var jsonData = pm.response.json().testCases;\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    pm.test(\"Test case \" + (i + 1) + \" passed\", function () {\r",
									"        pm.expect(jsonData[i].actual && !jsonData[i].inconclusive).equal(true);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/rhino/configurations/{{configuration_id}}/collections/invoke/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"configurations",
								"{{configuration_id}}",
								"collections",
								"invoke",
								"{{collection_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #19: Delete Test Case Collections",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #20: Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #21: Delete Configurations",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #22: Create Models Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('models_collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"Students Input Models\",\r\n        \"entries\": [\r\n            {\r\n                \"name\": \"search students text-box\",\r\n                \"value\": \"#SearchString\",\r\n                \"type\": \"css selector\",\r\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n            },\r\n            {\r\n                \"name\": \"search students button\",\r\n                \"value\": \"//input[@id='SearchButton']\",\r\n                \"comment\": \"Search students button on the top center panel under students page.\"\r\n            }\r\n        ],\r\n        \"context\": {\r\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n        }\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #23: Create Configuration - Local Driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [\r\n        \"{{models_collection_id}}\"\r\n    ],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 5,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #24: Create Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Tests count is 1\", () => {\r",
									"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] Text-001\n[test-scenario] search students\n\n[test-actions]\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\n2. send keys {Carson} into {search students text-box}\n3. click on {search students button}\n4. close browser\n\n[test-expected-results]\n[3] assert {count} on {//td[@id]} is greater than {0}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{configuration_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #25: Create Configuration - Local Driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [\r\n        \"{{models_collection_id}}\"\r\n    ],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 5,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #26: Add Configuration to Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Configurations count is 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}",
								"configurations",
								"{{configuration_id}}"
							]
						},
						"description": "Add additional _**Rhino Configuration**_ into an existing collection.\r\n\r\n```\r\nPATCH /api/v3/tests/:collection_id/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                                    |\r\n|----------------|------|-----------------------------------------------|\r\n|collection_id   |string|The ID of the _**Rhino Test Case**_ collection.|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.       |\r\n\r\n#### Response Content\r\n```js\r\n{\r\n  \"configurations\": [\r\n    \"03d1cd94-5e38-43d8-b010-e932d92f9067\",\r\n    \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n  ]\r\n}\r\n```\r\n\r\nThe example response includes 2 configuration which are associated with this collection.\r\n\r\n|Name          |Type  |Description                                      |\r\n|--------------|------|-------------------------------------------------|\r\n|configurations|array |All _**Rhino Models**_ which are using the model.|\r\n\r\n### Response Codes\r\n|Code|Description                                                           |\r\n|----|----------------------------------------------------------------------|\r\n|204 |Success, the _**Configuration**_ was applied to the _**Collection**_. |\r\n|404 |Not Found, the _**Collection**_ or _**Configuration**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.                     |"
					},
					"response": []
				},
				{
					"name": "Flow Action #09: Invoke Collection by Configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// setup\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// test runs\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    pm.test(\"Test run \" + (i + 1) + \" passed\", function () {\r",
									"        pm.expect(jsonData[i].actual).equal(true);\r",
									"    });\r",
									"}\r",
									"\r",
									"// test cases per run\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    for(j = 0; j < jsonData[i].testCases.length; j++) {\r",
									"        pm.test(\"Test case \" + (j + 1) + \" on test run \" + (i + 1) + \" passed\", function() {\r",
									"            pm.expect(jsonData[i].testCases[j].actual && !jsonData[i].testCases[j].inconclusive).equal(true);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/collections/invoke/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"collections",
								"invoke",
								"{{collection_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #10: Invoke Collection by Configurations - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Message status code is 404\", function () {\r",
									"    pm.expect(jsonData.status).equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Have error\", function () {\r",
									"    pm.expect(jsonData.errors.$.length).greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Have route\", function () {\r",
									"    pm.expect(jsonData.routeData.id).equal('not_a_collection');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/collections/invoke/not_a_collection",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"collections",
								"invoke",
								"not_a_collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #11: Invoke Collection by Configurations - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Message status code is 400\", function () {\r",
									"    pm.expect(jsonData.status).equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Have error\", function () {\r",
									"    pm.expect(jsonData.errors.$.length).greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Have route\", function () {\r",
									"    pm.expect(jsonData.routeData.id).equal(' ');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/collections/invoke/ ",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"collections",
								"invoke",
								" "
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #12: Invoke Collection by Configurations - Parallel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// setup\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// test runs\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    pm.test(\"Test run \" + (i + 1) + \" passed\", function () {\r",
									"        pm.expect(jsonData[i].actual).equal(true);\r",
									"    });\r",
									"}\r",
									"\r",
									"// test cases per run\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    for(j = 0; j < jsonData[i].testCases.length; j++) {\r",
									"        pm.test(\"Test case \" + (j + 1) + \" on test run \" + (i + 1) + \" passed\", function() {\r",
									"            pm.expect(jsonData[i].testCases[j].actual && !jsonData[i].testCases[j].inconclusive).equal(true);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/collections/invoke/{{collection_id}}?parallel=true",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"collections",
								"invoke",
								"{{collection_id}}"
							],
							"query": [
								{
									"key": "parallel",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #27: Delete Test Case Collections",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #28: Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #29: Delete Configurations",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #30: Create Models Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('models_collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"Students Input Models\",\r\n        \"entries\": [\r\n            {\r\n                \"name\": \"search students text-box\",\r\n                \"value\": \"#SearchString\",\r\n                \"type\": \"css selector\",\r\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n            },\r\n            {\r\n                \"name\": \"search students button\",\r\n                \"value\": \"//input[@id='SearchButton']\",\r\n                \"comment\": \"Search students button on the top center panel under students page.\"\r\n            }\r\n        ],\r\n        \"context\": {\r\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n        }\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #31: Create Configuration - Local Driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 5,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #32: Create Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Tests count is 1\", () => {\r",
									"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] Text-001\n[test-scenario] search students\n\n[test-actions]\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\n2. send keys {Carson} into {search students text-box}\n3. click on {search students button}\n4. close browser\n\n[test-expected-results]\n[3] assert {count} on {//td[@id]} is greater than {0}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{configuration_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup #33: Add Configuration to Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Configurations count is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).equal(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}",
								"configurations",
								"{{configuration_id}}"
							]
						},
						"description": "Add additional _**Rhino Configuration**_ into an existing collection.\r\n\r\n```\r\nPATCH /api/v3/tests/:collection_id/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                                    |\r\n|----------------|------|-----------------------------------------------|\r\n|collection_id   |string|The ID of the _**Rhino Test Case**_ collection.|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.       |\r\n\r\n#### Response Content\r\n```js\r\n{\r\n  \"configurations\": [\r\n    \"03d1cd94-5e38-43d8-b010-e932d92f9067\",\r\n    \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n  ]\r\n}\r\n```\r\n\r\nThe example response includes 2 configuration which are associated with this collection.\r\n\r\n|Name          |Type  |Description                                      |\r\n|--------------|------|-------------------------------------------------|\r\n|configurations|array |All _**Rhino Models**_ which are using the model.|\r\n\r\n### Response Codes\r\n|Code|Description                                                           |\r\n|----|----------------------------------------------------------------------|\r\n|204 |Success, the _**Configuration**_ was applied to the _**Collection**_. |\r\n|404 |Not Found, the _**Collection**_ or _**Configuration**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.                     |"
					},
					"response": []
				},
				{
					"name": "Flow Action #13: Invoke Collection by Configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// setup\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// test runs\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    pm.test(\"Test run \" + (i + 1) + \" passed\", function () {\r",
									"        pm.expect(jsonData[i].actual).equal(true);\r",
									"    });\r",
									"}\r",
									"\r",
									"// test cases per run\r",
									"for(i = 0; i < jsonData.length; i++) {\r",
									"    for(j = 0; j < jsonData[i].testCases.length; j++) {\r",
									"        pm.test(\"Test case \" + (j + 1) + \" on test run \" + (i + 1) + \" passed\", function() {\r",
									"            pm.expect(jsonData[i].testCases[j].actual && !jsonData[i].testCases[j].inconclusive).equal(true);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/collections/invoke/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"collections",
								"invoke",
								"{{collection_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests: Rhino Async",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Test Case Collections",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Page Model Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/models",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Configurations",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Configuration - Local Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"[test-id] Text-000\\r\\n[test-scenario]\\r\\nOpen a Web Site\\r\\n[test-actions]\\r\\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/}\\r\\n2. wait {1000}\\r\\n3. close browser\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {    \r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('collection_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[test-id] rhino-documentation-001\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {Carson} into {@search_text_box}\n4. click on {@search_button} using {css selector}\n5. wait for {3000} milliseconds\n6. register parameter {first_name} take {Jhon}\n7. close browser\n\n[test-expected-results]\n[1] assert {url} match {@url_expected}\n[5] assert {count} on {@students_table} is greater than {0}\n\n[test-data-provider]\n[\n\t{\n        \"url_expected\":\"gravitymvctestapplication.azurewebsites.net\",\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\n\t\t\"search_text_box\":\"//input[@id='SearchString']\",\n\t\t\"search_button\":\"#SearchButton\",\n\t\t\"students_table\": \"//td[@id]\"\n\t}\n]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/tests/{{configuration_id}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests",
										"{{configuration_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Preconditions for _**Rhino**_ microservices.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Async Flow #01: Invoke Configuration - Flat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// set variables\r",
									"pm.collectionVariables.set('invoke_id', jsonData.id);\r",
									"pm.collectionVariables.set('callback_request', 'Async Setup #01: Delete Page Model Collections');\r",
									"postman.setNextRequest('Get Invoke Status Runtime');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('async_timeout_now', 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"[test-id] Text-000\\r\\n[test-scenario]\\r\\nOpen a Web Site\\r\\n[test-actions]\\r\\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/}\\r\\n2. wait {1000}\\r\\n3. close browser\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/async/configurations/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"configurations",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #01: Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #02: Create Models Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('models_collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"Students Input Models\",\r\n        \"entries\": [\r\n            {\r\n                \"name\": \"search students text-box\",\r\n                \"value\": \"#SearchString\",\r\n                \"type\": \"css selector\",\r\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n            },\r\n            {\r\n                \"name\": \"search students button\",\r\n                \"value\": \"//input[@id='SearchButton']\",\r\n                \"comment\": \"Search students button on the top center panel under students page.\"\r\n            }\r\n        ],\r\n        \"context\": {\r\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n        }\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Flow #02: Invoke Configuration - Flat with Modles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// set variables\r",
									"pm.collectionVariables.set('invoke_id', jsonData.id);\r",
									"pm.collectionVariables.set('callback_request', 'Async Setup #03: Delete Test Case Collections');\r",
									"postman.setNextRequest('Get Invoke Status Runtime');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('async_timeout_now', 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"[test-id] Text-001\\n[test-scenario] search students\\n\\n[test-actions]\\ngo to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\\nsend keys {Carson} into {search students text-box}\\nclick on {search students button}\\nclose browser\\n\\n[test-expected-results]\\n[3] assert {count} on {//td[@id]} is greater than {0}\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [\r\n        \"{{models_collection_id}}\"\r\n    ],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/async/configurations/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"configurations",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #03: Delete Test Case Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #04: Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #05: Create Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-001\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\n\n[test-actions]\n1. go to url {@address} using any compliant web-browser\n2. close all child windows (to make sure only the web site is open and visible)\n3. send keys {Carson} into {@search_text_box}\n4. click on {@search_button} using {css selector}\n5. wait for {3000} milliseconds\n6. close browser\n\n[test-expected-results]\n[1] assert {url} match {@url_expected}\n[5] assert {count} on {@students_table} is greater than {0}\n\n[test-data-provider]\n[\n\t{\n\t\t\"url_expected\":\"gravitymvctestapplication.azurewebsites.net\",\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\n\t\t\"search_text_box\":\"//input[@id='SearchString']\",\n\t\t\"search_button\":\"#SearchButton\",\n\t\t\"students_table\": \"//td[@id]\"\n\t}\n]",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Flow #03: Invoke Configuration - Flat with Tests Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// set variables\r",
									"pm.collectionVariables.set('invoke_id', jsonData.id);\r",
									"pm.collectionVariables.set('callback_request', 'Async Setup #06: Delete Test Case Collections');\r",
									"postman.setNextRequest('Get Invoke Status Runtime');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('async_timeout_now', 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"{{collection_id}}\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/async/configurations/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"configurations",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #06: Delete Test Case Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #07: Create Models Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('models_collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"Students Input Models\",\r\n        \"entries\": [\r\n            {\r\n                \"name\": \"search students text-box\",\r\n                \"value\": \"#SearchString\",\r\n                \"type\": \"css selector\",\r\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n            },\r\n            {\r\n                \"name\": \"search students button\",\r\n                \"value\": \"//input[@id='SearchButton']\",\r\n                \"comment\": \"Search students button on the top center panel under students page.\"\r\n            }\r\n        ],\r\n        \"context\": {\r\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n        }\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #08: Create Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] Text-001\n[test-scenario] search students\n\n[test-actions]\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\n2. send keys {Carson} into {search students text-box}\n3. click on {search students button}\n4. close browser\n\n[test-expected-results]\n[3] assert {count} on {//td[@id]} is greater than {0}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Flow #04: Invoke Configuration - Flat with Tests Collection & Models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// set variables\r",
									"pm.collectionVariables.set('invoke_id', jsonData.id);\r",
									"pm.collectionVariables.set('callback_request', 'Async Setup #09: Delete Test Case Collections');\r",
									"postman.setNextRequest('Get Invoke Status Runtime');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('async_timeout_now', 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"{{collection_id}}\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [\r\n        \"{{models_collection_id}}\"\r\n    ],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/async/configurations/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"configurations",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #09: Delete Test Case Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #10: Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #11: Delete Configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #12: Create Configuration - Local Driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [\r\n        \"[test-id] Text-000\\r\\n[test-scenario]\\r\\nOpen a Web Site\\r\\n[test-actions]\\r\\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/}\\r\\n2. wait {1000}\\r\\n3. close browser\"\r\n    ],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Flow #05: Invoke Configuration by Configuration ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// set variables\r",
									"pm.collectionVariables.set('invoke_id', jsonData.id);\r",
									"pm.collectionVariables.set('callback_request', 'Async Setup #13: Delete Test Case Collections');\r",
									"postman.setNextRequest('Get Invoke Status Runtime');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('async_timeout_now', 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/rhino/async/configurations/invoke/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"configurations",
								"invoke",
								"{{configuration_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #13: Delete Test Case Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #14: Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Flow #06: Invoke Collection by Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// set variables\r",
									"pm.collectionVariables.set('invoke_id', jsonData.id);\r",
									"pm.collectionVariables.set('callback_request', 'Async Flow #07: Invoke Collection by Configuration - 404');\r",
									"postman.setNextRequest('Get Invoke Status Runtime');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('async_timeout_now', 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search_text_box}\r\n4. click on {@search_button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. register parameter {first_name} take {Jhon}\r\n7. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@url_expected}\r\n[5] assert {count} on {@students_table} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n        \"url_expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\r\n\t\t\"search_text_box\":\"//input[@id='SearchString']\",\r\n\t\t\"search_button\":\"#SearchButton\",\r\n\t\t\"students_table\": \"//td[@id]\"\r\n\t}\r\n]"
						},
						"url": {
							"raw": "{{endpoint}}/rhino/async/configurations/{{configuration_id}}/collections/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"configurations",
								"{{configuration_id}}",
								"collections",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Flow #07: Invoke Collection by Configuration - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Message status code is 404\", function () {\r",
									"    pm.expect(jsonData.status).equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Have error\", function () {\r",
									"    pm.expect(jsonData.errors.$.length).greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Have route\", function () {\r",
									"    pm.expect(jsonData.routeData.id).equal('not_a_configuration');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search_text_box}\r\n4. click on {@search_button} using {css selector}\r\n5. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@url_expected}\r\n[4] assert {count} on {@students_table} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"url_expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\t\t\r\n\t\t\"search_text_box\":\"//input[@id='SearchString']\",\r\n\t\t\"search_button\":\"#SearchButton\",\r\n\t\t\"students_table\": \"//td[@id]\"\r\n\t}\r\n]"
						},
						"url": {
							"raw": "{{endpoint}}/rhino/async/configurations/not_a_configuration/collections/invoke",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"configurations",
								"not_a_configuration",
								"collections",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #15: Create Models Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('models_collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"Students Input Models\",\r\n        \"entries\": [\r\n            {\r\n                \"name\": \"search students text-box\",\r\n                \"value\": \"#SearchString\",\r\n                \"type\": \"css selector\",\r\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n            },\r\n            {\r\n                \"name\": \"search students button\",\r\n                \"value\": \"//input[@id='SearchButton']\",\r\n                \"comment\": \"Search students button on the top center panel under students page.\"\r\n            }\r\n        ],\r\n        \"context\": {\r\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n        }\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #16: Create Configuration - Local Driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [\r\n        \"{{models_collection_id}}\"\r\n    ],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 5,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #17: Create Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Tests count is 1\", () => {\r",
									"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] Text-001\n[test-scenario] search students\n\n[test-actions]\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\n2. send keys {Carson} into {search students text-box}\n3. click on {search students button}\n4. close browser\n\n[test-expected-results]\n[3] assert {count} on {//td[@id]} is greater than {0}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Flow #08: Invoke Collection by Collection & Configuration ID(s)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// set variables\r",
									"pm.collectionVariables.set('invoke_id', jsonData.id);\r",
									"pm.collectionVariables.set('callback_request', 'Async Setup #19: Delete Test Case Collections');\r",
									"postman.setNextRequest('Get Invoke Status Runtime');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('async_timeout_now', 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/rhino/async/configurations/{{configuration_id}}/collections/invoke/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"configurations",
								"{{configuration_id}}",
								"collections",
								"invoke",
								"{{collection_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #19: Delete Test Case Collections",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #20: Delete Page Model Collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #21: Delete Configurations",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #22: Create Models Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('models_collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"Students Input Models\",\r\n        \"entries\": [\r\n            {\r\n                \"name\": \"search students text-box\",\r\n                \"value\": \"#SearchString\",\r\n                \"type\": \"css selector\",\r\n                \"comment\": \"Search students text-box on the top center panel under students page.\"\r\n            },\r\n            {\r\n                \"name\": \"search students button\",\r\n                \"value\": \"//input[@id='SearchButton']\",\r\n                \"comment\": \"Search students button on the top center panel under students page.\"\r\n            }\r\n        ],\r\n        \"context\": {\r\n            \"pageUrl\": \"https://gravitymvctestapplication.azurewebsites.net/student\"\r\n        }\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #23: Create Configuration - Local Driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [\r\n        \"{{models_collection_id}}\"\r\n    ],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 5,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #24: Create Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {    \r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Tests count is 1\", () => {\r",
									"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] Text-001\n[test-scenario] search students\n\n[test-actions]\n1. go to url {https://gravitymvctestapplication.azurewebsites.net/student} using any compliant web-browser\n2. send keys {Carson} into {search students text-box}\n3. click on {search students button}\n4. close browser\n\n[test-expected-results]\n[3] assert {count} on {//td[@id]} is greater than {0}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{configuration_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #25: Create Configuration - Local Driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Execute Tests by Raw Text\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [\r\n        \"{{models_collection_id}}\"\r\n    ],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 5,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Setup #26: Add Configuration to Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Configurations count is 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}/configurations/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}",
								"configurations",
								"{{configuration_id}}"
							]
						},
						"description": "Add additional _**Rhino Configuration**_ into an existing collection.\r\n\r\n```\r\nPATCH /api/v3/tests/:collection_id/configurations/:configuration_id\r\n```\r\n\r\n|Name            |Type  |Description                                    |\r\n|----------------|------|-----------------------------------------------|\r\n|collection_id   |string|The ID of the _**Rhino Test Case**_ collection.|\r\n|configuration_id|string|The ID of the _**Rhino Configuration**_.       |\r\n\r\n#### Response Content\r\n```js\r\n{\r\n  \"configurations\": [\r\n    \"03d1cd94-5e38-43d8-b010-e932d92f9067\",\r\n    \"8bed8025-3cgf-52g1-0919-533cbc6d523c\"\r\n  ]\r\n}\r\n```\r\n\r\nThe example response includes 2 configuration which are associated with this collection.\r\n\r\n|Name          |Type  |Description                                      |\r\n|--------------|------|-------------------------------------------------|\r\n|configurations|array |All _**Rhino Models**_ which are using the model.|\r\n\r\n### Response Codes\r\n|Code|Description                                                           |\r\n|----|----------------------------------------------------------------------|\r\n|204 |Success, the _**Configuration**_ was applied to the _**Collection**_. |\r\n|404 |Not Found, the _**Collection**_ or _**Configuration**_ were not found.|\r\n|500 |Fail, the server encountered an unexpected error.                     |"
					},
					"response": []
				},
				{
					"name": "Async Flow #09: Invoke Collection by Configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// set variables\r",
									"pm.collectionVariables.set('invoke_id', jsonData[0].id);\r",
									"pm.collectionVariables.set('callback_request', 'Async Flow #10: Invoke Collection by Configurations - 404');\r",
									"postman.setNextRequest('Get Invoke Status Runtime');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('async_timeout_now', 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/async/collections/invoke/{{collection_id}}?parallel=true",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"collections",
								"invoke",
								"{{collection_id}}"
							],
							"query": [
								{
									"key": "parallel",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Flow #10: Invoke Collection by Configurations - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Message status code is 404\", function () {\r",
									"    pm.expect(jsonData.status).equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Have error\", function () {\r",
									"    pm.expect(jsonData.errors.$.length).greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Have route\", function () {\r",
									"    pm.expect(jsonData.routeData.id).equal('not_a_collection');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/async/collections/invoke/not_a_collection",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"collections",
								"invoke",
								"not_a_collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Async Flow #11: Invoke Collection by Configurations - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set('callback_request', '-1');\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Message status code is 400\", function () {\r",
									"    pm.expect(jsonData.status).equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Have error\", function () {\r",
									"    pm.expect(jsonData.errors.$.length).greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Have route\", function () {\r",
									"    pm.expect(jsonData.routeData.id).equal(' ');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/async/collections/invoke/ ",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"collections",
								"invoke",
								" "
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Invoke Status Runtime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// not found\r",
									"if(pm.response.status === 404) {\r",
									"    postman.setNextRequest(pm.collectionVariables.get('callback_request'));\r",
									"    console.log('Test status was not found, either test was completed or corrupted. Moving to next test.');\r",
									"}\r",
									"\r",
									"// complete\r",
									"var isRequest = pm.collectionVariables.get('callback_request') !== '-1';\r",
									"if(!isRequest) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"// ok\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// setup\r",
									"var jsonData = pm.response.json();\r",
									"var timeoutNow = parseInt(pm.collectionVariables.get('async_timeout_now'));\r",
									"var timeoutPooling = parseInt(pm.collectionVariables.get('async_pooling'));\r",
									"var isTimeout = parseInt(pm.collectionVariables.get('async_timeout')) < timeoutNow;\r",
									"\r",
									"// processing\r",
									"if(jsonData.status === 'Running' && !isTimeout) {\r",
									"    pm.test(\"Test is still running\", function () {\r",
									"        pm.expect(jsonData.status).to.equal('Running');\r",
									"    });\r",
									"\r",
									"    setTimeout(()=> {\r",
									"        pm.collectionVariables.set('async_timeout_now', timeoutNow + timeoutPooling);\r",
									"        postman.setNextRequest('Get Invoke Status Runtime');\r",
									"    }, timeoutPooling);\r",
									"}\r",
									"\r",
									"// complete\r",
									"if(jsonData.status !== 'Running' && !isTimeout) {\r",
									"    // test completed\r",
									"    pm.test(\"Test status is \" + jsonData.status, function () {\r",
									"        pm.expect(jsonData.status).to.not.equal('Running');\r",
									"    });\r",
									"\r",
									"    // test run has result\r",
									"    pm.test(\"Test run has result\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        var actual = jsonData.entityOut.actual ? true : false;\r",
									"        pm.expect(jsonData.entityOut.actual).equal(actual);\r",
									"    });\r",
									"\r",
									"    // test run has test cases\r",
									"    pm.test(\"Test run has test cases\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        var actual = jsonData.entityOut.testCases.length > 0 ? true : false;\r",
									"        pm.expect(actual).equal(true);\r",
									"    });\r",
									"\r",
									"    // set callback\r",
									"    postman.setNextRequest(pm.collectionVariables.get('callback_request')); \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/rhino/async/status/{{invoke_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"rhino",
								"async",
								"status",
								"{{invoke_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests: Meta Data",
			"item": [
				{
					"name": "Flow Action #01: Get Plugins",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entities count is greater than 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/plugins",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"plugins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #02: Get Plugin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entity key equal 'SendKeys'\", function () {\r",
									"    var jsonData = pm.response.json().key;\r",
									"    pm.expect(jsonData).equal('SendKeys');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/plugins/SendKeys",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"plugins",
								"SendKeys"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #03: Get Plugin - Not  Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches 'Get-Plugin -Key not_an_entity = NotFound'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Get-Plugin -Key not_an_entity = NotFound\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is 404\", function () {\r",
									"    var jsonData = pm.response.json().status;\r",
									"    pm.expect(jsonData).equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Key equal 'not_an_entity'\", function () {\r",
									"    var jsonData = pm.response.json().routeData.key;\r",
									"    pm.expect(jsonData).contains('not_an_entity');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/plugins/not_an_entity",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"plugins",
								"not_an_entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #04: Get Assertions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entities count is greater than 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/assertions",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"assertions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #05: Get Assertion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entity key equal 'attribute'\", function () {\r",
									"    var jsonData = pm.response.json().key;\r",
									"    pm.expect(jsonData).equal('attribute');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/assertions/attribute",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"assertions",
								"attribute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #06: Get Assertion - Not  Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Message contains 'NotFound'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Get-Assertion -Key not_an_entity = NotFound\");\r",
									"});\r",
									"\r",
									"pm.test(\"Key equal 'not_an_entity'\", function () {\r",
									"    var jsonData = pm.response.json().routeData.key;\r",
									"    pm.expect(jsonData).contains('not_an_entity');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/assertions/not_an_entity",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"assertions",
								"not_an_entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #07: Get Connectors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entities count is greater than 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/connectors",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"connectors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #08: Get Connector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entity key equal 'connector_azure'\", function () {\r",
									"    var jsonData = pm.response.json().key;\r",
									"    pm.expect(jsonData).equal('ConnectorAzure');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/connectors/ConnectorAzure",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"connectors",
								"ConnectorAzure"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #09: Get Connector - Not  Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Message contains 'NotFound'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Get-Connector -Key not_an_entity = NotFound\");\r",
									"});\r",
									"\r",
									"pm.test(\"Key equal 'not_an_entity'\", function () {\r",
									"    var jsonData = pm.response.json().routeData.key;\r",
									"    pm.expect(jsonData).contains('not_an_entity');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/connectors/not_an_entity",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"connectors",
								"not_an_entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #10: Get Drivers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entities count is greater than 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/drivers",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"drivers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #11: Get Driver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entity key equal 'AndroidDriver'\", function () {\r",
									"    var jsonData = pm.response.json().key;\r",
									"    pm.expect(jsonData).equal('AndroidDriver');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/drivers/AndroidDriver",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"drivers",
								"AndroidDriver"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #12: Get Driver - Not  Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Message contains 'NotFound'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Get-Driver -Key not_an_entity = NotFound\");\r",
									"});\r",
									"\r",
									"pm.test(\"Key equal 'not_an_entity'\", function () {\r",
									"    var jsonData = pm.response.json().routeData.key;\r",
									"    pm.expect(jsonData).contains('not_an_entity');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/drivers/not_an_entity",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"drivers",
								"not_an_entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #13: Get Locators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entities count is greater than 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/locators",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"locators"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #14: Get Locator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entity key equal 'Id'\", function () {\r",
									"    var jsonData = pm.response.json().key;\r",
									"    pm.expect(jsonData).equal('Id');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/locators/Id",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"locators",
								"Id"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #15: Get Locator - Not  Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Message contains 'NotFound'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Get-Locator -Key not_an_entity = NotFound\");\r",
									"});\r",
									"\r",
									"pm.test(\"Key equal 'not_an_entity'\", function () {\r",
									"    var jsonData = pm.response.json().routeData.key;\r",
									"    pm.expect(jsonData).contains('not_an_entity');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/locators/not_an_entity",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"locators",
								"not_an_entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #13: Get Macros",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entities count is greater than 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/macros",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"macros"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #14: Get Macro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entity key equal 'alertxt'\", function () {\r",
									"    var jsonData = pm.response.json().key;\r",
									"    pm.expect(jsonData).equal('alertxt');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/macros/alertxt",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"macros",
								"alertxt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #15: Get Macro - Not  Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Message contains 'NotFound'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Get-Macro -Key not_an_entity = NotFound\");\r",
									"});\r",
									"\r",
									"pm.test(\"Key equal 'not_an_entity'\", function () {\r",
									"    var jsonData = pm.response.json().routeData.key;\r",
									"    pm.expect(jsonData).contains('not_an_entity');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/macros/not_an_entity",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"macros",
								"not_an_entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #16: Get Operators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entities count is greater than 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/operators",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"operators"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #17: Get Operator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entity key equal 'EQ'\", function () {\r",
									"    var jsonData = pm.response.json().key;\r",
									"    pm.expect(jsonData).equal('EQ');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/operators/EQ",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"operators",
								"EQ"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #18: Get Operator - Not  Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Message contains 'NotFound'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Get-Macro -Key not_an_entity = NotFound\");\r",
									"});\r",
									"\r",
									"pm.test(\"Key equal 'not_an_entity'\", function () {\r",
									"    var jsonData = pm.response.json().routeData.key;\r",
									"    pm.expect(jsonData).contains('not_an_entity');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/macros/not_an_entity",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"macros",
								"not_an_entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #19: Get Reporters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entities count is greater than 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/reporters",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"reporters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #20: Get Reporter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entity key equal 'ReporterBasic'\", function () {\r",
									"    var jsonData = pm.response.json().key;\r",
									"    pm.expect(jsonData).equal('ReporterBasic');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/reporters/ReporterBasic",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"reporters",
								"ReporterBasic"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #21: Get Reporter - Not  Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Message contains 'NotFound'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Get-Reporter -Key not_an_entity = NotFound\");\r",
									"});\r",
									"\r",
									"pm.test(\"Key equal 'not_an_entity'\", function () {\r",
									"    var jsonData = pm.response.json().routeData.key;\r",
									"    pm.expect(jsonData).contains('not_an_entity');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/reporters/not_an_entity",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"reporters",
								"not_an_entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #22: Get Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entities count is greater than 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #23: Get Property",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entity key equal 'test-id'\", function () {\r",
									"    var jsonData = pm.response.json().key;\r",
									"    pm.expect(jsonData).equal('test-id');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/annotations/test-id",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"annotations",
								"test-id"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #24: Get Property - Not  Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Message contains 'NotFound'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Get-Property -Key not_an_entity = NotFound\");\r",
									"});\r",
									"\r",
									"pm.test(\"Key equal 'not_an_entity'\", function () {\r",
									"    var jsonData = pm.response.json().routeData.key;\r",
									"    pm.expect(jsonData).contains('not_an_entity');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/annotations/not_an_entity",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"annotations",
								"not_an_entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #25: Get Models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entities count is greater than 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #26: Get Model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entity name equal 'Students Input Models'\", function () {\r",
									"    var jsonData = pm.response.json().name;\r",
									"    pm.expect(jsonData).equal('Students Input Models');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/models/Students Input Models",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"models",
								"Students Input Models"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #27: Get Model - Not  Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Message contains 'NotFound'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Get-Model -Name not_an_entity = NotFound\");\r",
									"});\r",
									"\r",
									"pm.test(\"Name equal 'not_an_entity'\", function () {\r",
									"    var jsonData = pm.response.json().routeData.name;\r",
									"    pm.expect(jsonData).contains('not_an_entity');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/models/not_an_entity",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"models",
								"not_an_entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #28: Get Model - Not  Found - Case Sensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Message contains 'NotFound'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Get-Model -Name students input models - 2 = NotFound\");\r",
									"});\r",
									"\r",
									"pm.test(\"Name equal 'students input models - 2'\", function () {\r",
									"    var jsonData = pm.response.json().routeData.name;\r",
									"    pm.expect(jsonData).contains('students input models - 2');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/models/students input models - 2",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"models",
								"students input models - 2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #29: Get Verbs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entities count is greater than 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/verbs",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"verbs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #30: Get Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Entities count is greater than 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/attributes",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #31: Get Service Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/events/OnGetTestCases",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"events",
								"OnGetTestCases"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-reporter"
					},
					"response": []
				},
				{
					"name": "Flow Action #32: Get Service Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/events",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"events"
							]
						},
						"description": "https://github.com/savanna-projects/rhino-agent/blob/master/docs/pages/ApiReference/Meta.md#get-reporter"
					},
					"response": []
				},
				{
					"name": "Flow Action #33: Get Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"At least one service\", function () {\r",
									"    pm.response.size() > 1;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/meta/services",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"meta",
								"services"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests: Test Cases",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Delete Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204,404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete All Collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{endpoint}}/tests",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('configuration_id', jsonData.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/configurations",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"configurations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Flow Action #01: Create Configuration - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('configuration_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Rhino Automation - Chrome & Firefox\",\r\n    \"integration\": \"BrowserStack\",\r\n    \"testsRepository\": [],\r\n    \"driverParameters\": [\r\n        {\r\n            \"driver\": \"ChromeDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        },\r\n        {\r\n            \"driver\": \"FirefoxDriver\",\r\n            \"driverBinaries\": \"{{rhino_drivers}}\"\r\n        }\r\n    ],\r\n    \"dataSource\": [],\r\n    \"models\": [],\r\n    \"authentication\": {\r\n        \"password\": \"{{rhino_password}}\",\r\n        \"userName\": \"{{rhino_user}}\"\r\n    },\r\n    \"engineConfiguration\": {\r\n        \"maxParallel\": 1,\r\n        \"failOnException\": false,\r\n        \"optimalThreshold\": 3,\r\n        \"qualityThreshold\": 0,\r\n        \"toleranceThreshold\": 0,\r\n        \"priority\": 0,\r\n        \"severity\": 0,\r\n        \"errorOnExitCode\": 0,\r\n        \"elementSearchingTimeout\": 15000,\r\n        \"pageLoadTimeout\": 60000,\r\n        \"retrunExceptions\": true,\r\n        \"returnPerformancePoints\": true,\r\n        \"returnEnvironment\": true,\r\n        \"terminateOnAssertFailure\": false\r\n    },\r\n    \"screenshotsConfiguration\": {\r\n        \"keepOriginal\": false,\r\n        \"returnScreenshots\": {{use_reports}},\r\n        \"onExceptionOnly\": false\r\n    },\r\n    \"reportConfiguration\": {\r\n        \"reporters\": [\r\n            \"ReporterBasic\"\r\n        ],\r\n        \"dataProvider\": null,\r\n        \"archive\": false,\r\n        \"localReport\": {{use_reports}},\r\n        \"addGravityData\": {{use_reports}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #02: Create Tests Collection  with Configuration - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests/{{configuration_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{configuration_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #03: Create Tests Collection - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #04: Create Tests Collection - No Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #05: Get Tests Collections - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Tests count is 2\", () => {\r",
									"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('2');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #06: Get Tests Collection - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Tests count is 1\", () => {\r",
									"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('1');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #07: Get Tests Collection - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests/not_a_collection",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"not_a_collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #08: Get Associated Configurations - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Configurations count is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    return jsonData.length === 1;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}",
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #09: Get Associated Configurations - Collection Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests/not_a_collection/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"not_a_collection",
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #10: Create Tests Collection - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set('collection_id', jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #11: Get Associated Configurations - Configuration Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Configurations count is 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    return jsonData.length === 0;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}/configurations",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}",
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #12: Add Tests - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Tests count is 3\", () => {\r",
									"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('3');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-002\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-003\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #13: Add Tests - Collection Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]\r\n\r\n>>>\r\n\r\n[test-id] rhino-documentation-001\r\n[test-scenario] search students on https://gravitymvctestapplication.azurewebsites.net/student web-site\r\n\r\n[test-actions]\r\n1. go to url {@address} using any compliant web-browser\r\n2. close all child windows (to make sure only the web site is open and visible)\r\n3. send keys {Carson} into {@search-text-box} text-box\r\n4. click on {@search-button} using {css selector}\r\n5. wait for {3000} milliseconds\r\n6. close browser\r\n\r\n[test-expected-results]\r\n[1] assert {url} match {@address-expected}\r\n[5] assert {count} on {@search-text-box} is greater than {0}\r\n\r\n[test-data-provider]\r\n[\r\n\t{\r\n\t\t\"address\":\"https://gravitymvctestapplication.azurewebsites.net/student\",\r\n\t\t\"address-expected\":\"gravitymvctestapplication.azurewebsites.net\",\r\n\t\t\"search-text-box\":\"//input[@id='SearchString']\",\r\n\t\t\"search-button\":\"#SearchButton\",\r\n\t\t\"students-table\": \"//td[@id]\"\r\n\t}\r\n]",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/tests/not_a_collection",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"not_a_collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #14: Add Configuration - Configuration Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}/configurations/not_a_configuration",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}",
								"configurations",
								"not_a_configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #15: Get Tests Collections - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Tests count is 5\", () => {\r",
									"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('5');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #16: Delete Collection - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #17: Delete Collection - Collection Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests/{{collection_id}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests",
								"{{collection_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #18: Get Tests Collections - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Tests count is 2\", () => {\r",
									"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('2');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #19: Delete Collections - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Action #20: Get Tests Collections - Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Tests count is 0\", () => {\r",
									"  pm.expect(pm.response.headers.get('Rhino-Total-Specs')).to.eql('0');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/tests",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"tests"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Utilities",
			"item": [
				{
					"name": "Get Automation Usage",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{rhino_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{rhino_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gravityapi.azurewebsites.net/api/account/usage",
							"protocol": "https",
							"host": [
								"gravityapi",
								"azurewebsites",
								"net"
							],
							"path": [
								"api",
								"account",
								"usage"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{rhino_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{rhino_user}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"Utilities = {};",
					"",
					"Utilities.sleep = (milisecond) => {",
					"    const date = Date.now();",
					"    while((date + milisecond) > Date.now());",
					"}",
					"console.log('Create-Utility -Name sleep = Ok');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "endpoint",
			"value": ""
		},
		{
			"key": "rhino_password",
			"value": ""
		},
		{
			"key": "rhino_user",
			"value": ""
		},
		{
			"key": "rhino_drivers",
			"value": ""
		},
		{
			"key": "collection_id",
			"value": ""
		},
		{
			"key": "async_timeout_now",
			"value": ""
		},
		{
			"key": "invoke_id",
			"value": ""
		},
		{
			"key": "callback_request",
			"value": ""
		},
		{
			"key": "configuration_id",
			"value": ""
		},
		{
			"key": "session_id",
			"value": ""
		},
		{
			"key": "log_id",
			"value": ""
		},
		{
			"key": "models_collection_id",
			"value": ""
		},
		{
			"key": "status_query",
			"value": ""
		},
		{
			"key": "use_reports",
			"value": ""
		},
		{
			"key": "async_pooling",
			"value": ""
		},
		{
			"key": "async_timeout",
			"value": ""
		}
	]
}